{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenidos a Grow","text":""},{"location":"#que-es-grow","title":"\u00bfQue es Grow?","text":"<p>Grow es una pagina Web dedicada a una barberia que tambien lleva su nombre y lo que busca es facilitar la conexion de los clientes a la barberia gracias a su dise\u00f1o sencillo y sus interfaces de compra de productos, visualizacion de eventos y reservas online con diferentes notificaciones y tambien facilitar la gesti\u00f3n de su barberia a el due\u00f1o de esta teniendo una interfaz de administraci\u00f3n para poder gestionar los productos, eventos, reservas y consultar las ganancias y clinetes registrados en esta pagina.</p>"},{"location":"#tecnologias-utilizadas","title":"Tecnologias utilizadas","text":"<p>Las tecnologias que hemos usado para realizar esta pagina web son principalmente Django en la parte del Backend con diferentes librerias como pillow, django-rq. En cuanto al Frontend hemos utilizado como un framework de trabajo de OSP Vue utilizando en el typeScript sobre todo para realizar las funcionalidades y axios para las peticiones a la API de Django, y en dise\u00f1o usamos en mayoria bootstrap y diferentes estilos de CSS personalizados para dar una experiencia al usuario agradable.</p>"},{"location":"#documentacion","title":"Documentacion.","text":"<p>Backend</p> <p>Frontend</p>"},{"location":"Backend/","title":"Indice del Backend","text":"<p>Aqui puedes ver todas las applicaciones de django que tienen una importancia clave en el desarrollo de la aplicacio Web</p>"},{"location":"Backend/#indice","title":"Indice","text":"<ul> <li>Aplicacion compartida</li> <li>Aplicacion de Autenticacion</li> <li>Aplicacion de reservas</li> <li>Aplicacion de eventos</li> <li>Aplicacion de pedidos</li> <li>Aplicacion de productos</li> <li>Aplicacion de servicios</li> <li>Aplicacion de usuarios</li> <li>Aplicacion de Bot de telegram</li> </ul>"},{"location":"Backend/#urls-principales","title":"Urls principales","text":"<pre><code>\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('login/', accounts.views.user_login, name='login'),\n    path('logout/', accounts.views.user_logout, name='logout'),\n    path('signup/', accounts.views.user_signup, name='signup'),\n    path('api/user/', users.views.get_user_profile, name='user'),\n    path('api/users-per-mounth/', users.views.users_per_mounth, name='users-per-mounth'),\n    path('api/barbers/', users.views.get_barbers, name='barber'),\n    path('api/bookings/', include('bookings.urls')),\n    path('api/products/', include('products.urls')),\n    path('api/services/', include('services.urls')),\n    path('api/events/', include('events.urls')),\n    path('api/orders/', include('orders.urls')),\n]\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n\n</code></pre>"},{"location":"Backend/accounts/","title":"Documentaci\u00f3n de la Aplicaci\u00f3n Accounts","text":""},{"location":"Backend/accounts/#introduccion","title":"Introducci\u00f3n","text":"<p>La aplicaci\u00f3n <code>accounts</code> es responsable de la gesti\u00f3n de usuarios en la aplicaci\u00f3n web. Proporciona funcionalidades para iniciar sesi\u00f3n, cerrar sesi\u00f3n y registrarse.</p>"},{"location":"Backend/accounts/#vistas","title":"Vistas","text":""},{"location":"Backend/accounts/#user_login","title":"user_login","text":"<pre><code>\n@csrf_exempt\n@required_method('POST')\n@load_json_body\ndef user_login(request):\n    \"\"\"\n    Inicia sesi\u00f3n de un usuario.\n    Este endpoint permite a un usuario autenticarse proporcionando su nombre de usuario\n    y contrase\u00f1a. Si las credenciales son correctas, se inicia la sesi\u00f3n y se devuelve\n    un token de autenticaci\u00f3n.\n\n    Parameters\n    ----------\n    request : HttpRequest\n        Objeto de solicitud HTTP que contiene las credenciales del usuario.\n    Returns\n    -------\n    JsonResponse\n        Respuesta con un mensaje de \u00e9xito y el token de autenticaci\u00f3n.\n    \"\"\"\n\n    username = request.json_body['username']\n    password = request.json_body['password']\n    if user := authenticate(request, username=username, password=password):\n        login(request, user)\n        return JsonResponse(\n            {'msg': 'Usuario logeado', 'token': user.token.key, 'role': user.profile.role}\n        )\n</code></pre>"},{"location":"Backend/accounts/#descripcion","title":"Descripci\u00f3n","text":"<p>El endpoint user_login permite a los usuarios autenticarse mediante su nombre de usuario y contrase\u00f1a. Si las credenciales son correctas, se inicia la sesi\u00f3n y se devuelve un token de autenticaci\u00f3n junto con el rol del usuario.</p>"},{"location":"Backend/accounts/#user_logout","title":"user_logout","text":"<pre><code>@login_required\ndef user_logout(request):\n    \"\"\"\n    Cierra la sesi\u00f3n de un usuario.\n\n    Este endpoint permite a un usuario autenticado cerrar su sesi\u00f3n.\n    Se elimina la sesi\u00f3n activa y se devuelve un mensaje de \u00e9xito.\n\n    Parameters\n    ----------\n    request : HttpRequest\n        Objeto de solicitud HTTP.\n\n    Returns\n    -------\n    JsonResponse\n        Respuesta con un mensaje de \u00e9xito.\n    \"\"\"\n    logout(request)\n    return JsonResponse({'msg': 'Sesion Cerrada'})\n</code></pre> <p>...</p>"},{"location":"Backend/accounts/#descripcion_1","title":"Descripci\u00f3n","text":"<p>El endpoint user_logout permite a los usuarios autenticados cerrar su sesi\u00f3n. Se elimina la sesi\u00f3n activa y se devuelve un mensaje de \u00e9xito.</p>"},{"location":"Backend/accounts/#user_signup","title":"user_signup","text":"<pre><code>@csrf_exempt\n@required_method('POST')\n@load_json_body\ndef user_signup(request):\n    \"\"\"\n    Registra un nuevo usuario.\n    Este endpoint permite crear un nuevo usuario proporcionando su nombre de usuario,\n    contrase\u00f1a, nombre, apellido y correo electr\u00f3nico. El usuario se guarda en la base de datos.\n    Parameters\n    ----------\n    request : HttpRequest\n        Objeto de solicitud HTTP que contiene los datos del nuevo usuario.\n    Returns\n    -------\n    JsonResponse\n        Respuesta con un mensaje de \u00e9xito indicando que el usuario ha sido creado.\n    \"\"\"\n    username = request.json_body['username']\n    password = request.json_body['password']\n    first_name = request.json_body['first_name']\n    last_name = request.json_body['last_name']\n    email = request.json_body['email']\n    user = User(\n        username=username,\n        first_name=first_name,\n        last_name=last_name,\n        email=email,\n    )\n    user.set_password(password)\n    user.save()\n    return JsonResponse({'msg': f'se ha creado el usuario {user.username}'})\n</code></pre> <p>...</p>"},{"location":"Backend/accounts/#descripcion_2","title":"Descripci\u00f3n","text":"<p>El endpoint user_signup permite crear un nuevo usuario proporcionando su nombre de usuario, contrase\u00f1a, nombre, apellido y correo electr\u00f3nico. El usuario se guarda en la base de datos y se devuelve un mensaje de \u00e9xito.</p>"},{"location":"Backend/bookings/","title":"Documentaci\u00f3n de la Aplicaci\u00f3n Bookings","text":""},{"location":"Backend/bookings/#introduccion","title":"Introducci\u00f3n","text":"<p>La aplicaci\u00f3n <code>bookings</code> gestiona las reservas de servicios de los usuarios. Permite a los usuarios crear, editar, cancelar y listar sus reservas, as\u00ed como obtener informaci\u00f3n sobre las fechas y horarios disponibles.</p>"},{"location":"Backend/bookings/#modelos","title":"Modelos","text":""},{"location":"Backend/bookings/#timeslot","title":"TimeSlot","text":"<pre><code>class TimeSlot(models.Model):\n    \"\"\"\n    Modelo que representa un bloque horario para una reserva.\n\n    Attributes\n    ----------\n    start_time : TimeField\n        Hora de inicio del bloque.\n    end_time : TimeField\n        Hora de fin del bloque.\n    \"\"\"\n    start_time = models.TimeField()\n    end_time = models.TimeField()\n\n    def __str__(self):\n        \"\"\"\n        Devuelve una representaci\u00f3n legible del bloque horario.\n\n        Returns\n        -------\n        str\n            Cadena con el formato 'HH:MM:SS-HH:MM:SS'.\n        \"\"\"\n        return f'{self.start_time}-{self.end_time}'\n</code></pre> <p>...</p>"},{"location":"Backend/bookings/#descripcion","title":"Descripci\u00f3n","text":"<p>El modelo TimeSlot representa un bloque horario para una reserva, con atributos para la hora de inicio y fin.</p>"},{"location":"Backend/bookings/#booking","title":"Booking","text":"<pre><code>class Booking(models.Model):\n    \"\"\"\n    Modelo que representa una reserva de servicio entre un cliente y un barbero.\n\n    Attributes\n    ----------\n    user : ForeignKey\n        Usuario que realiza la reserva.\n    barber : ForeignKey\n        Usuario con rol de barbero que atiende la reserva.\n    service : ForeignKey\n        Servicio seleccionado para la reserva.\n    date : DateField\n        Fecha de la reserva.\n    time_slot : ForeignKey\n        Bloque horario en el que se agenda la reserva.\n    status : IntegerField\n        Estado de la reserva (confirmada o cancelada).\n    created_at : DateTimeField\n        Fecha de creaci\u00f3n de la reserva.\n    \"\"\"\n    class Meta:\n        unique_together = ['barber', 'date', 'time_slot']\n\n    class Status(models.IntegerChoices):\n        \"\"\"\n        Enumeraci\u00f3n de los posibles estados de una reserva.\n        \"\"\"\n        CONFIRMED = 2, 'Confirmed'\n        CANCELLED = -1, 'Cancelled'\n\n    user = models.ForeignKey(\n        settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='bookings'\n    )\n    barber = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        on_delete=models.CASCADE,\n        related_name='barber_bookings',\n        limit_choices_to={'profile__role': Profile.Role.WORKER},\n        verbose_name='Barbero',\n    )\n    service = models.ForeignKey(Service, on_delete=models.CASCADE, related_name='bookings')\n    date = models.DateField()\n    time_slot = models.ForeignKey(TimeSlot, on_delete=models.CASCADE, related_name='bookings')\n    status = models.IntegerField(choices=Status.choices, default=Status.CONFIRMED)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        \"\"\"\n        Devuelve una representaci\u00f3n legible de la reserva.\n\n        Returns\n        -------\n        str\n            Cadena con el formato 'usuario servicio fecha horario'.\n        \"\"\"\n        return f'{self.user} {self.service} {self.date} {self.time_slot}'\n</code></pre> <p>...</p>"},{"location":"Backend/bookings/#descripcion_1","title":"Descripci\u00f3n","text":"<p>El modelo Booking representa una reserva de servicio entre un cliente y un barbero, incluyendo informaci\u00f3n sobre el usuario, el barbero, el servicio, la fecha, el horario y el estado de la reserva.</p>"},{"location":"Backend/bookings/#serializadores","title":"Serializadores","text":""},{"location":"Backend/bookings/#bookingserializer","title":"BookingSerializer","text":"<pre><code>class BookingSerializer(BaseSerializer):\n    \"\"\"\n    Serializador para una reserva.\n    \"\"\"\n    def serialize_instance(self, instance) -&gt; dict:\n        \"\"\"\n        Serializa una instancia de reserva.\n\n        Parameters\n        ----------\n        instance : Booking\n            La instancia de reserva a serializar.\n\n        Returns\n        -------\n        dict\n            Un diccionario que representa la instancia de reserva.\n        \"\"\"\n        return {\n            'id': instance.id,\n            'user': instance.user.id,\n            'service': ServiceSerializer(instance.service).serialize_instance(instance.service),\n            'date': instance.date,\n            'time_slot': TimeSlotSerializer(instance.time_slot).serialize_instance(\n                instance.time_slot\n            ),\n            'barber': instance.barber.get_full_name(),\n            'barber_id': instance.barber.id,\n            'status': instance.get_status_display(),\n            'created_at': instance.created_at,\n        }\n</code></pre> <p>...</p>"},{"location":"Backend/bookings/#descripcion_2","title":"Descripci\u00f3n","text":"<p>El BookingSerializer se utiliza para serializar instancias de reservas, proporcionando una representaci\u00f3n en formato JSON de los atributos relevantes.</p>"},{"location":"Backend/bookings/#timeslotserializer","title":"TimeSlotSerializer","text":"<pre><code>class TimeSlotSerializer(BaseSerializer):\n    \"\"\"\n    Serializador para un bloque horario.\n    \"\"\"\n    def serialize_instance(self, instance) -&gt; dict:\n        \"\"\"\n        Serializa una instancia de bloque horario.\n\n        Parameters\n        ----------\n        instance : TimeSlot\n            La instancia de bloque horario a serializar.\n\n        Returns\n        -------\n        dict\n            Un diccionario que representa la instancia de bloque horario.\n        \"\"\"\n        return {\n            'id': instance.id,\n            'start_time': instance.start_time,\n            'end_time': instance.end_time,\n        }\n</code></pre> <p>...</p>"},{"location":"Backend/bookings/#descripcion_3","title":"Descripci\u00f3n","text":"<p>El TimeSlotSerializer se utiliza para serializar instancias de bloques horarios, proporcionando una representaci\u00f3n en formato JSON de los atributos relevantes.</p>"},{"location":"Backend/bookings/#bookingearningsserializer","title":"BookingEarningsSerializer","text":"<pre><code>class BookingEarningsSerializer(BaseSerializer):\n    \"\"\"\n    Serializador para el resumen de ganancias de reservas.\n    \"\"\"\n    def serialize_instance(self, instance=None) -&gt; dict:\n        \"\"\"\n        Serializa el resumen de ganancias de las reservas.\n\n        Parameters\n        ----------\n        instance : Booking, opcional\n            La instancia de reserva (no se utiliza en este m\u00e9todo).\n\n        Returns\n        -------\n        dict\n            Un diccionario que contiene el resumen de ganancias.\n        \"\"\"\n        summary = Booking.earnings_summary()\n        return {\n            'daily_earnings': summary['daily'],\n            'weekly_earnings': summary['weekly'],\n            'monthly_earnings': summary['monthly'],\n        }\n</code></pre> <p>...</p>"},{"location":"Backend/bookings/#descripcion_4","title":"Descripci\u00f3n","text":"<p>El BookingEarningsSerializer se utiliza para serializar el resumen de ganancias de las reservas, proporcionando una representaci\u00f3n en formato JSON de los ingresos diarios, semanales y mensuales.</p>"},{"location":"Backend/bookings/#vistas","title":"Vistas","text":""},{"location":"Backend/bookings/#user_booking_list","title":"user_booking_list","text":"<pre><code>\n@csrf_exempt\n@required_method('GET')\n@verify_token\ndef user_booking_list(request):\n    \"\"\"\n    Devuelve una lista de todas las reservas de usuario en formato JSON.\n    Este endpoint requiere que el usuario est\u00e9 autenticado.\n    Realiza una consulta a la base de datos para obtener todas las reservas de un usuario\n    y las serializa antes de devolverlas en una respuesta JSON.\n\n    Parameters\n    ----------\n    request : HttpRequest\n        Objeto de solicitud HTTP.\n    Returns\n    -------\n    JsonResponse\n        Respuesta JSON con la lista de reservas.\n    \"\"\"\n    bookings = Booking.objects.filter(user=request.user)\n    bookings_serializer = [BookingSerializer(booking).serialize() for booking in bookings]\n    return JsonResponse(bookings_serializer, safe=False, status=200)\n</code></pre>"},{"location":"Backend/bookings/#descripcion_5","title":"Descripci\u00f3n","text":"<p>Este endpoint devuelve una lista de todas las reservas del usuario autenticado en formato JSON.</p>"},{"location":"Backend/bookings/#create_booking","title":"create_booking","text":"<pre><code>@csrf_exempt\n@required_method('POST')\n@load_json_body\n@required_fields('service', 'time_slot', 'date', 'barber', model=Booking)\n@verify_token\n@validate_barber_and_timeslot_existence\n@validate_barber_availability\ndef create_booking(request):\n    \"\"\"\n    Crea una nueva reserva.\n\n    Este endpoint permite a un usuario autenticado crear una nueva reserva\n    proporcionando el servicio, el horario, la fecha y el barbero.\n    Si el servicio no existe, devuelve un error.\n\n    Parameters\n    ----------\n    request : HttpRequest\n        Objeto de solicitud HTTP que contiene los datos de la reserva.\n\n    Returns\n    -------\n    JsonResponse\n        Respuesta JSON con el ID de la nueva reserva o un error si el servicio no se encuentra.\n    \"\"\"\n    service_pk = request.json_body['service']\n    barber_id = request.json_body['barber']\n    date = request.json_body['date']\n\n    try:\n        service = Service.objects.get(pk=service_pk)\n    except Service.DoesNotExist:\n        return JsonResponse({'error': 'Servicio no encontrado.'}, status=400)\n\n    try:\n        barber_profile = Profile.objects.get(user_id=barber_id, role=Profile.Role.WORKER)\n    except Profile.DoesNotExist:\n        return JsonResponse({'error': 'Barbero no encontrado o no v\u00e1lido.'}, status=404)\n\n    booking = Booking.objects.create(\n        user=request.user,\n        barber=barber_profile.user,\n        service=service,\n        date=date,\n        time_slot=request.time_slot,\n    )\n\n    return JsonResponse({'id': booking.pk})\n</code></pre> <p>...</p>"},{"location":"Backend/bookings/#descripcion_6","title":"Descripci\u00f3n","text":"<p>Este endpoint permite a un usuario autenticado crear una nueva reserva proporcionando el servicio, el horario, la fecha y el barbero.</p>"},{"location":"Backend/bookings/#edit_booking","title":"edit_booking","text":"<pre><code>@login_required\n@csrf_exempt\n@required_method('POST')\n@load_json_body\n@required_fields('service', 'time_slot', 'date', 'barber', model=Booking)\n@verify_token\n@verify_booking\n@validate_barber_and_timeslot_existence\n@validate_barber_availability\ndef edit_booking(request, booking_pk):\n    \"\"\"\n    Edita una reserva existente.\n\n    Este endpoint permite a un usuario autenticado editar una reserva\n    existente proporcionando el nuevo servicio, horario, fecha y barbero.\n\n    Parameters\n    ----------\n    request : HttpRequest\n        Objeto de solicitud HTTP que contiene los datos de la reserva.\n    booking_pk : int\n        ID de la reserva a editar.\n\n    Returns\n    -------\n    JsonResponse\n        Respuesta JSON con un mensaje de \u00e9xito.\n    \"\"\"\n    service_pk = request.json_body['service']\n    date = request.json_body['date']\n\n    service = Service.objects.get(pk=service_pk)\n    booking = request.booking\n\n    booking.service = service\n    booking.barber = request.barber_profile.user\n    booking.date = date\n    booking.time_slot = request.time_slot\n    booking.save()\n\n    return JsonResponse({'msg': 'La reserva ha sido editada'})\n</code></pre> <p>...</p>"},{"location":"Backend/bookings/#descripcion_7","title":"Descripci\u00f3n","text":"<p>Este endpoint permite a un usuario autenticado editar una reserva existente.</p>"},{"location":"Backend/bookings/#booking_detail","title":"booking_detail","text":"<pre><code>@login_required\n@csrf_exempt\n@required_method('GET')\n@verify_booking\ndef booking_detail(request, booking_pk):\n    \"\"\"\n    Devuelve los detalles de una reserva espec\u00edfica.\n\n    Este endpoint permite a un usuario autenticado obtener los detalles\n    de una reserva espec\u00edfica utilizando su ID.\n\n    Parameters\n    ----------\n    request : HttpRequest\n        Objeto de solicitud HTTP.\n    booking_pk : int\n        ID de la reserva.\n\n    Returns\n    -------\n    JsonResponse\n        Respuesta JSON con los detalles de la reserva.\n    \"\"\"\n    booking = request.booking\n    serializer = BookingSerializer(booking, request=request)\n    return serializer.json_response()\n</code></pre> <p>...</p>"},{"location":"Backend/bookings/#descripcion_8","title":"Descripci\u00f3n","text":"<p>Este endpoint devuelve los detalles de una reserva espec\u00edfica utilizando su ID.</p>"},{"location":"Backend/bookings/#cancel_booking","title":"cancel_booking","text":"<pre><code>@csrf_exempt\n@required_method('POST')\n@verify_token\n@verify_booking\ndef cancel_booking(request, booking_pk):\n    \"\"\"\n    Cancela una reserva existente.\n\n    Este endpoint permite a un usuario autenticado cancelar una reserva\n    espec\u00edfica utilizando su ID.\n\n    Parameters\n    ----------\n    request : HttpRequest\n        Objeto de solicitud HTTP.\n    booking_pk : int\n        ID de la reserva a cancelar.\n\n    Returns\n    -------\n    JsonResponse\n        Respuesta JSON con un mensaje de \u00e9xito.\n    \"\"\"\n    booking = request.booking\n    booking.delete()\n    return JsonResponse({'msg': 'La reserva ha sido cancelada'})\n</code></pre> <p>...</p>"},{"location":"Backend/bookings/#descripcion_9","title":"Descripci\u00f3n","text":"<p>Este endpoint permite a un usuario autenticado cancelar una reserva espec\u00edfica.</p>"},{"location":"Backend/bookings/#get_available_dates","title":"get_available_dates","text":"<pre><code>@csrf_exempt\n@required_method('GET')\n@verify_token\ndef get_available_dates(request):\n    \"\"\"\n    Devuelve las fechas disponibles para reservas de un barbero espec\u00edfico.\n\n    Par\u00e1metros GET:\n    - barber_id: ID del barbero para filtrar (requerido)\n\n    Parameters\n    ----------\n    request : HttpRequest\n        Objeto de solicitud HTTP.\n\n    Returns\n    -------\n    JsonResponse\n        Respuesta JSON con las fechas y horarios disponibles para el barbero especificado.\n    \"\"\"\n    barber_id = request.GET.get('barber_id')\n\n    if not barber_id:\n        return JsonResponse({'error': 'El par\u00e1metro barber_id es requerido'}, status=400)\n\n    try:\n        barber = User.objects.get(id=barber_id, profile__role=Profile.Role.WORKER)\n    except User.DoesNotExist:\n        return JsonResponse({'error': 'Barbero no encontrado'}, status=404)\n\n    now = timezone.now()\n    today = now.date()\n    start_date = today\n    end_date = today + timedelta(days=13)  # 14 d\u00edas desde hoy, incluyendo hoy.\n\n    available_slots = {}\n    current_date = start_date\n\n    while current_date &lt;= end_date:\n        if is_working_day(current_date):\n            current_time = now.time() if current_date == today else None\n            available_slots[current_date.isoformat()] = get_available_time_slots(\n                barber, current_date, current_time\n            )\n        current_date += timedelta(days=1)\n\n    return JsonResponse(\n        {\n            'barber_id': barber.id,\n            'barber_name': barber.get_full_name() or barber.username,\n            'available_dates': available_slots,\n        }\n    )\n</code></pre> <p>...</p>"},{"location":"Backend/bookings/#descripcion_10","title":"Descripci\u00f3n","text":"<p>Este endpoint devuelve las fechas y horarios disponibles para reservas de un barbero espec\u00edfico.</p>"},{"location":"Backend/bookings/#get_earnings","title":"get_earnings","text":"<pre><code>@csrf_exempt\n@required_method('GET')\n@verify_token\n@verify_admin\ndef get_earnings(request):\n    \"\"\"\n    Obtiene las ganancias diarias del mes actual basadas en reservas confirmadas.\n\n    Esta vista recorre cada d\u00eda del mes actual y calcula el total de ingresos generados\n    por las reservas confirmadas (status = CONFIRMED). Las ganancias se determinan\n    a partir del precio del servicio asociado a cada reserva.\n\n    Parameters\n    ----------\n    request : HttpRequest\n        La solicitud HTTP entrante. Debe ser de tipo GET y debe incluir un token de autenticaci\u00f3n v\u00e1lido.\n        Solo accesible por usuarios con permisos de administrador.\n\n    Returns\n    -------\n    JsonResponse\n        Un objeto JSON con:\n            - 'labels': Lista de fechas (str) en formato 'YYYY-MM-DD'.\n            - 'values': Lista de floats representando las ganancias totales por d\u00eda.\n    \"\"\"\n    now = timezone.now()\n    first_day_of_month = now.replace(day=1)\n    last_day_of_month = (first_day_of_month + timezone.timedelta(days=31)).replace(\n        day=1\n    ) - timezone.timedelta(days=1)\n\n    total_earnings = []\n    labels = []\n\n    for day in range(1, last_day_of_month.day + 1):\n        date = first_day_of_month.replace(day=day)\n        bookings = Booking.objects.filter(created_at__date=date, status=Booking.Status.CONFIRMED)\n        earnings = sum(booking.service.price for booking in bookings)\n        total_earnings.append(earnings)\n        labels.append(date.strftime('%Y-%m-%d'))\n\n    return JsonResponse(\n        {\n            'labels': labels,\n            'values': total_earnings,\n        }\n    )\n</code></pre> <p>...</p>"},{"location":"Backend/bookings/#descripcion_11","title":"Descripci\u00f3n","text":"<p>Este endpoint obtiene las ganancias diarias del mes actual basadas en reservas confirmadas.</p>"},{"location":"Backend/bookings/#urls","title":"URLs","text":"<pre><code>from django.urls import path\nfrom . import views\n\nname = 'bookings'\nurlpatterns = [\n    path('', views.user_booking_list, name='user_booking_list'),\n    path('get-earnings/', views.get_earnings, name='get-earnings'),\n    path('&lt;int:booking_pk&gt;/', views.booking_detail, name='booking_detail'),\n    path('add/', views.create_booking, name='add-booking'),\n    path('dates/', views.get_available_dates, name='add-available-dates'),\n    path('&lt;int:booking_pk&gt;/edit/', views.edit_booking, name='edit-booking'),\n    path('&lt;int:booking_pk&gt;/cancel/', views.cancel_booking, name='cancel-booking'),\n]\n</code></pre> <p>...</p>"},{"location":"Backend/bookings/#utilitarios","title":"Utilitarios","text":""},{"location":"Backend/bookings/#get_available_time_slots","title":"get_available_time_slots","text":"<pre><code>def get_available_time_slots(barber, date, current_time=None):\n    \"\"\"\n    Obtiene los horarios disponibles para un barbero en una fecha espec\u00edfica.\n\n    Parameters\n    ----------\n    barber : Barber\n        Instancia del barbero.\n    date : datetime.date\n        Fecha para la que se buscan los horarios.\n    current_time : datetime.time, opcional\n        Hora actual, utilizada para excluir horarios pasados.\n\n    Returns\n    -------\n    list of dict\n        Lista de horarios disponibles, donde cada horario es un diccionario\n        que contiene las siguientes claves:\n            - id : int\n            - start_time : str\n            - end_time : str\n    \"\"\"\n    time_slots = TimeSlot.objects.all()\n    booked_slots = Booking.objects.filter(barber=barber, date=date).values_list(\n        'time_slot', flat=True\n    )\n    available_time_slots = time_slots.exclude(id__in=booked_slots)\n\n    if current_time:\n        available_time_slots = available_time_slots.filter(start_time__gt=current_time)\n\n    return [\n        {\n            'id': slot.id,\n            'start_time': slot.start_time.strftime('%H:%M'),\n            'end_time': slot.end_time.strftime('%H:%M'),\n        }\n        for slot in available_time_slots\n    ]\n</code></pre>"},{"location":"Backend/bookings/#descripcion_12","title":"Descripci\u00f3n","text":"<p>Esta funci\u00f3n obtiene los horarios disponibles para un barbero en una fecha espec\u00edfica, excluyendo los horarios ya reservados y, opcionalmente, los horarios pasados.</p>"},{"location":"Backend/bookings/#is_working_day","title":"is_working_day","text":"<pre><code>def is_working_day(date):\n    \"\"\"\n    Determina si una fecha es d\u00eda laboral (excluye domingos).\n\n    Parameters\n    ----------\n    date : datetime.date\n        Fecha a evaluar.\n\n    Returns\n    -------\n    bool\n        True si es d\u00eda laboral, False en caso contrario.\n    \"\"\"\n    return date.weekday() != 6  # Excluye domingos.\n</code></pre> <p>...</p>"},{"location":"Backend/bookings/#descripcion_13","title":"Descripci\u00f3n","text":"<p>Esta funci\u00f3n determina si una fecha es un d\u00eda laboral, excluyendo los domingos.</p>"},{"location":"Backend/bookings/#decoradores","title":"Decoradores","text":""},{"location":"Backend/bookings/#verify_booking","title":"verify_booking","text":"<pre><code>\ndef verify_booking(func):\n    \"\"\"\n    Decorador que intenta recuperar una reserva (booking) a partir de 'booking_pk' en los par\u00e1metros de la URL.\n\n    Si la reserva existe, se adjunta al objeto request como 'request.booking'.\n    Si no existe, devuelve una respuesta JSON con error 404 (Not Found).\n\n    Parameters\n    ----------\n    func : callable\n        Vista a decorar.\n\n    Returns\n    -------\n    callable\n        Vista decorada con la verificaci\u00f3n de existencia de la reserva.\n    \"\"\"\n    def wrapper(request, *args, **kwargs):\n        try:\n            booking = Booking.objects.get(id=kwargs['booking_pk'])\n            request.booking = booking\n        except Booking.DoesNotExist:\n            return JsonResponse({'error': 'Booking not found'}, status=404)\n\n        return func(request, *args, **kwargs)\n\n    return wrapper\n</code></pre> <p>...</p>"},{"location":"Backend/bookings/#descripcion_14","title":"Descripci\u00f3n","text":"<p>Este decorador verifica la existencia de una reserva y la adjunta al objeto request. Si la reserva no existe, devuelve un error 404.</p>"},{"location":"Backend/bookings/#validate_barber_and_timeslot_existence","title":"validate_barber_and_timeslot_existence","text":"<pre><code>def validate_barber_and_timeslot_existence(view_func):\n    \"\"\"\n    Decorador que valida la existencia del barbero y del intervalo de tiempo (time slot)\n    en los datos enviados con la solicitud.\n\n    Agrega el perfil del barbero y el time slot al objeto request si existen.\n    Si alguno no existe o no es v\u00e1lido, devuelve una respuesta JSON con el error correspondiente.\n\n    Parameters\n    ----------\n    view_func : callable\n        Vista a decorar.\n\n    Returns\n    -------\n    callable\n        Vista decorada con validaci\u00f3n de barbero e intervalo de tiempo.\n    \"\"\"\n    def wrapper(request, *args, **kwargs):\n        data = request.json_body\n\n        try:\n            request.barber_profile = Profile.objects.get(user_id=data['barber'])\n            if request.barber_profile.role != Profile.Role.WORKER:\n                return JsonResponse({'error': 'The user is not a Barber'}, status=400)\n        except Profile.DoesNotExist:\n            return JsonResponse({'error': 'Barber not found'}, status=404)\n\n        try:\n            request.time_slot = TimeSlot.objects.get(pk=data['time_slot'])\n        except TimeSlot.DoesNotExist:\n            return JsonResponse({'error': 'Invalid time slot'}, status=404)\n\n        return view_func(request, *args, **kwargs)\n\n    return wrapper\n</code></pre> <p>...</p>"},{"location":"Backend/bookings/#descripcion_15","title":"Descripci\u00f3n","text":"<p>Este decorador valida la existencia del barbero y del intervalo de tiempo en los datos de la solicitud. Si alguno no existe, devuelve un error correspondiente.</p>"},{"location":"Backend/bookings/#validate_barber_availability","title":"validate_barber_availability","text":"<pre><code>def validate_barber_availability(view_func):\n    \"\"\"\n    Decorador que valida si el barbero est\u00e1 disponible en la fecha y hora solicitadas.\n\n    Utiliza los datos 'date', 'barber_profile' y 'time_slot' previamente cargados en el objeto request.\n    Si ya existe una reserva para ese barbero en la fecha y horario indicados,\n    devuelve una respuesta JSON con error 400 (Bad Request).\n\n    Parameters\n    ----------\n    view_func : callable\n        Vista a decorar.\n\n    Returns\n    -------\n    callable\n        Vista decorada que valida la disponibilidad del barbero.\n    \"\"\"\n    def wrapper(request, *args, **kwargs):\n        date = request.json_body['date']\n        barber_user = request.barber_profile.user\n        time_slot = request.time_slot\n\n        if Booking.objects.filter(barber=barber_user, date=date, time_slot=time_slot).exists():\n            return JsonResponse(\n                {'error': 'El barbero no est\u00e1 disponible en ese horario.'}, status=400\n            )\n\n        return view_func(request, *args, **kwargs)\n\n    return wrapper\n</code></pre> <p>...</p>"},{"location":"Backend/bookings/#descripcion_16","title":"Descripci\u00f3n","text":"<p>Este decorador valida si el barbero est\u00e1 disponible en la fecha y hora solicitadas. Si ya existe una reserva, devuelve un error 400.</p>"},{"location":"Backend/events/","title":"Documentaci\u00f3n de la Aplicaci\u00f3n Events","text":""},{"location":"Backend/events/#introduccion","title":"Introducci\u00f3n","text":"<p>La aplicaci\u00f3n <code>events</code> gestiona eventos programados, permitiendo a los administradores crear, editar, eliminar y listar eventos.</p>"},{"location":"Backend/events/#modelos","title":"Modelos","text":""},{"location":"Backend/events/#event","title":"Event","text":"<pre><code>from django.db import models\n\nclass Event(models.Model):\n    \"\"\"\n    Modelo que representa un evento programado.\n\n    Atributos\n    ----------\n    name : CharField\n        Nombre del evento.\n    description : TextField\n        #### Descripci\u00f3n opcional del evento.\n    date : DateField\n        Fecha en la que se llevar\u00e1 a cabo el evento.\n    time : TimeField\n        Hora en la que comenzar\u00e1 el evento.\n    image : ImageField\n        Imagen representativa del evento. Puede estar vac\u00eda o usar una imagen por defecto.\n    location : CharField\n        Direcci\u00f3n o lugar donde se realiza el evento.\n    created_at : DateTimeField\n        Fecha y hora en la que se cre\u00f3 el evento (autom\u00e1ticamente asignada).\n    \"\"\"\n    name = models.CharField(max_length=100)\n    description = models.TextField(blank=True, null=True)\n    date = models.DateField()\n    time = models.TimeField()\n    image = models.ImageField(\n        upload_to='media/events_images/',\n        default='events_images/no_event.png',\n        blank=True,\n        null=True,\n    )\n    location = models.CharField(max_length=255)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        \"\"\"\n        Retorna una representaci\u00f3n legible del evento.\n\n        Returns\n        -------\n        str\n            Cadena con el formato 'Nombre en Fecha en Ubicaci\u00f3n'.\n        \"\"\"\n        return f'{self.name} on {self.date} at {self.location}'\n</code></pre>"},{"location":"Backend/events/#descripcion","title":"Descripci\u00f3n","text":"<p>El modelo Event representa un evento programado, incluyendo atributos como nombre, Descripci\u00f3n, fecha, hora, imagen y ubicaci\u00f3n.</p>"},{"location":"Backend/events/#serializadores","title":"Serializadores","text":""},{"location":"Backend/events/#eventserializer","title":"EventSerializer","text":"<pre><code>\nclass EventSerializer(BaseSerializer):\n    \"\"\"\n    Serializador para instancias del modelo Event.\n\n    Este serializador transforma una instancia de Event en un diccionario\n    con los campos relevantes para su representaci\u00f3n en una API.\n    \"\"\"\n    def serialize_instance(self, instance) -&gt; dict:\n        \"\"\"\n        Serializa una instancia del modelo Event a un diccionario.\n\n        Parameters\n        ----------\n        instance : Event\n            Instancia del modelo Event que se desea serializar.\n\n        Returns\n        -------\n        dict\n            Diccionario con los datos serializados del evento.\n        \"\"\"\n        return {\n            'id': instance.id,\n            'name': instance.name,\n            'description': instance.description,\n            'date': instance.date,\n            'time': instance.time,\n            'location': instance.location,\n            'image': f'{self.build_url(instance.image.url)}',\n        }\n</code></pre> <p>...</p>"},{"location":"Backend/events/#descripcion_1","title":"Descripci\u00f3n","text":"<p>El EventSerializer se utiliza para serializar instancias del modelo Event, proporcionando una representaci\u00f3n en formato JSON de los atributos relevantes.</p>"},{"location":"Backend/events/#decoradores","title":"Decoradores","text":""},{"location":"Backend/events/#verify_event","title":"verify_event","text":"<pre><code>\ndef verify_event(func):\n    \"\"\"\n    Decorador que intenta recuperar un evento usando 'event_pk' desde los par\u00e1metros de la URL.\n    Si el evento existe, se adjunta al objeto request como 'request.event'.\n    Si no existe, devuelve una respuesta JSON con error 404 (No encontrado).\n    Parameters\n    ----------\n    func : callable\n        Vista a decorar.\n    Returns\n    -------\n    callable\n        Vista decorada que incluye la verificaci\u00f3n de existencia del evento.\n\n    \"\"\"\n\n    def wrapper(request, *args, **kwargs):\n        try:\n            event = Event.objects.get(id=kwargs['event_pk'])\n            request.event = event\n        except Event.DoesNotExist:\n            return JsonResponse({'error': 'Evento no encontrado'}, status=404)\n\n        return func(request, *args, **kwargs)\n\n    return wrapper\n</code></pre>"},{"location":"Backend/events/#descripcion_2","title":"Descripci\u00f3n","text":"<p>El decorador verify_event se utiliza para verificar la existencia de un evento en la base de datos utilizando el event_pk proporcionado en los par\u00e1metros de la URL.</p>"},{"location":"Backend/events/#vistas","title":"Vistas","text":""},{"location":"Backend/events/#event_list","title":"event_list","text":"<pre><code>@csrf_exempt\n@required_method('GET')\ndef event_list(request):\n    \"\"\"\n    Devuelve una lista de todos los eventos en formato JSON.\n\n    Este endpoint permite obtener todos los eventos registrados en la base de datos.\n\n    Parameters\n    ----------\n    request : HttpRequest\n        Objeto de solicitud HTTP.\n\n    Returns\n    -------\n    JsonResponse\n        Respuesta JSON con la lista de eventos serializados.\n    \"\"\"\n    events = Event.objects.all()\n    serializer = EventSerializer(events, request=request)\n    return serializer.json_response()\n</code></pre> <p>...</p>"},{"location":"Backend/events/#descripcion_3","title":"Descripci\u00f3n","text":"<p>Este endpoint devuelve una lista de todos los eventos registrados en la base de datos en formato JSON.</p>"},{"location":"Backend/events/#event_detail","title":"event_detail","text":"<pre><code>@required_method('GET')\n@verify_event\ndef event_detail(request, event_pk):\n    \"\"\"\n    Devuelve los detalles de un evento espec\u00edfico.\n\n    Parameters\n    ----------\n    request : HttpRequest\n        Objeto de solicitud HTTP.\n    event_pk : int\n        ID del evento a consultar.\n\n    Returns\n    -------\n    JsonResponse\n        Respuesta JSON con los detalles del evento.\n    \"\"\"\n    event = request.event\n    serializer = EventSerializer(event, request=request)\n    return serializer.json_response()\n</code></pre> <p>...</p>"},{"location":"Backend/events/#descripcion_4","title":"Descripci\u00f3n","text":"<p>Este endpoint devuelve los detalles de un evento espec\u00edfico utilizando su ID.</p>"},{"location":"Backend/events/#add_event","title":"add_event","text":"<pre><code>@csrf_exempt\n@required_method('POST')\n@load_json_body\n@required_fields('name', 'description', 'date', 'time', 'location', model=Event)\n@verify_token\n@verify_admin\ndef add_event(request):\n    \"\"\"\n    Agrega un nuevo evento.\n\n    Solo un administrador autenticado puede crear eventos nuevos.\n\n    Parameters\n    ----------\n    request : HttpRequest\n        Objeto de solicitud HTTP que contiene los datos del evento.\n\n    Returns\n    -------\n    JsonResponse\n        Respuesta JSON con el ID del evento creado.\n    \"\"\"\n    name = request.json_body['name']\n    description = request.json_body['description']\n    date = request.json_body['date']\n    time = request.json_body['time']\n    location = request.json_body['location']\n    image_base64 = request.json_body.get('image')\n\n    image_file = None\n    if image_base64:\n        try:\n            format_part, data_part = image_base64.split(',')\n            file_format = format_part.split('/')[1].split(';')[0]\n\n            image_data = base64.b64decode(data_part)\n\n            filename = f'service_{uuid.uuid4().hex[:8]}.{file_format}'\n            image_file = ContentFile(image_data, name=filename)\n\n        except Exception as e:\n            return JsonResponse({'error': f'Error procesando la imagen: {str(e)}'}, status=400)\n\n    event = Event.objects.create(\n        name=name,\n        description=description,\n        location=location,\n        date=date,\n        image=image_file,\n        time=time,\n    )\n\n    return JsonResponse({'id': event.pk, 'msg': 'Servicio creado exitosamente'})\n</code></pre> <p>...</p>"},{"location":"Backend/events/#descripcion_5","title":"Descripci\u00f3n","text":"<p>Este endpoint permite a un administrador autenticado crear un nuevo evento.</p>"},{"location":"Backend/events/#edit_event","title":"edit_event","text":"<pre><code>@csrf_exempt\n@required_method('POST')\n@load_json_body\n@required_fields('name', 'description', 'date', 'time', 'location', model=Event)\n@verify_token\n@verify_admin\n@verify_event\ndef edit_event(request, event_pk: int):\n    \"\"\"\n    Edita un evento existente.\n\n    Un administrador autenticado puede modificar los datos de un evento.\n\n    Parameters\n    ----------\n    request : HttpRequest\n        Objeto de solicitud HTTP con los datos del evento.\n    event_pk : int\n        ID del evento a editar.\n\n    Returns\n    -------\n    JsonResponse\n        Respuesta JSON con un mensaje de confirmaci\u00f3n.\n    \"\"\"\n    event = request.event\n    event.name = request.json_body['name']\n    event.description = request.json_body['description']\n    event.date = request.json_body['date']\n    event.location = request.json_body['location']\n    event.time = request.json_body['time']\n    image_base64 = request.json_body.get('image')\n    if image_base64:\n        try:\n            format_part, data_part = image_base64.split(',')\n            file_format = format_part.split('/')[1].split(';')[0]\n\n            image_data = base64.b64decode(data_part)\n\n            filename = f'service_{uuid.uuid4().hex[:8]}.{file_format}'\n            image_file = ContentFile(image_data, name=filename)\n            event.image = image_file\n        except Exception as e:\n            return JsonResponse({'error': f'Error procesando la imagen: {str(e)}'}, status=400)\n\n    event.save()\n    return JsonResponse({'msg': 'Event has been edited'})\n</code></pre> <p>...</p>"},{"location":"Backend/events/#descripcion_6","title":"Descripci\u00f3n","text":"<p>Este endpoint permite a un administrador autenticado editar un evento existente.</p>"},{"location":"Backend/events/#delete_event","title":"delete_event","text":"<pre><code>@csrf_exempt\n@required_method('POST')\n@verify_token\n@verify_admin\n@verify_event\ndef delete_event(request, event_pk: int):\n    \"\"\"\n    Elimina un evento existente.\n\n    Solo un administrador autenticado puede eliminar eventos.\n\n    Parameters\n    ----------\n    request : HttpRequest\n        Objeto de solicitud HTTP.\n    event_pk : int\n        ID del evento a eliminar.\n\n    Returns\n    -------\n    JsonResponse\n        Respuesta JSON con un mensaje de \u00e9xito.\n    \"\"\"\n    event = request.event\n    event.delete()\n    return JsonResponse({'msg': 'Event has been deleted'})\n</code></pre> <p>...</p>"},{"location":"Backend/events/#descripcion_7","title":"Descripci\u00f3n","text":"<p>Este endpoint permite a un administrador autenticado eliminar un evento existente.</p>"},{"location":"Backend/events/#urls","title":"URLs","text":"<pre><code>\nname = 'events'\nurlpatterns = [\n    path('', views.event_list, name='event_list'),\n    path('&lt;int:event_pk&gt;/', views.event_detail, name='event-detail'),\n    path('add/', views.add_event, name='add-event'),\n    path('&lt;int:event_pk&gt;/edit/', views.edit_event, name='edit-event'),\n    path('&lt;int:event_pk&gt;/delete/', views.delete_event, name='delete-event'),\n]\n</code></pre> <p>...</p>"},{"location":"Backend/orders/","title":"Documentaci\u00f3n de la Aplicaci\u00f3n Orders","text":""},{"location":"Backend/orders/#introduccion","title":"Introducci\u00f3n","text":"<p>La aplicaci\u00f3n <code>orders</code> gestiona las \u00f3rdenes de compra realizadas por los usuarios. Permite a los usuarios crear, ver, pagar y cancelar \u00f3rdenes, as\u00ed como a los administradores obtener un resumen de las ganancias.</p>"},{"location":"Backend/orders/#modelos","title":"Modelos","text":""},{"location":"Backend/orders/#_1","title":"Documentaci\u00f3n de la Aplicaci\u00f3n Orders","text":"<pre><code>\nclass Order(models.Model):\n    \"\"\"\n    Modelo que representa una orden de compra realizada por un usuario.\n\n    Attributes\n    ----------\n    status : CharField\n        Estado de la orden: Pendiente, Completada o Cancelada.\n    products : ManyToManyField\n        Lista de productos asociados a la orden.\n    price : DecimalField\n        Precio total de la orden (opcional).\n    created_at : DateTimeField\n        Fecha y hora de creaci\u00f3n de la orden.\n    updated_at : DateTimeField\n        Fecha y hora de la \u00faltima actualizaci\u00f3n.\n    user : ForeignKey\n        Usuario que realiz\u00f3 la orden.\n    \"\"\"\n    class Status(models.TextChoices):\n        PENDING = 'P', 'Pending'\n        COMPLETED = 'C', 'Completed'\n        CANCELLED = 'X', 'Cancelled'\n\n    status = models.CharField(max_length=1, choices=Status.choices, default=Status.PENDING)\n    products = models.ManyToManyField('products.Product', blank=True)\n    price = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    user = models.ForeignKey(\n        settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='orders'\n    )\n\n    def __str__(self):\n        return f'{self.user} Status:{self.status}'\n\n    def add(self, product):\n        self.products.add(product)\n        self.save()\n\n    @classmethod\n    def earnings_summary(cls):\n        today = now().date()\n        start_week = today - timedelta(days=today.weekday())\n        start_month = today.replace(day=1)\n\n        daily = (\n            cls.objects.filter(created_at=today, status=cls.Status.COMPLETED).aggregate(\n                total=Sum('price')\n            )['total'] or 0\n        )\n\n        weekly = (\n            cls.objects.filter(\n                created_at__gte=start_week, created_at__lte=today, status=cls.Status.COMPLETED\n            ).aggregate(total=Sum('price'))['total'] or 0\n        )\n\n        monthly = (\n            cls.objects.filter(\n                created_at__gte=start_month, created_at__lte=today, status=cls.Status.COMPLETED\n            ).aggregate(total=Sum('price'))['total'] or 0\n        )\n\n        return {'daily': daily, 'weekly': weekly, 'monthly': monthly}\n</code></pre>"},{"location":"Backend/orders/#descripcion","title":"Descripci\u00f3n","text":"<p>El modelo Order representa una orden de compra, incluyendo atributos como estado, productos, precio, fechas de creaci\u00f3n y actualizaci\u00f3n, y el usuario que realiz\u00f3 la orden.</p>"},{"location":"Backend/orders/#serializadores","title":"Serializadores","text":""},{"location":"Backend/orders/#orderserializer","title":"OrderSerializer","text":"<pre><code>\nclass OrderSerializer(BaseSerializer):\n    \"\"\"\n    Serializador para el modelo Order.\n\n    Este serializador convierte instancias de la clase Order en diccionarios\n    que pueden ser f\u00e1cilmente convertidos a JSON.\n    \"\"\"\n    def serialize_instance(self, instance) -&gt; dict:\n        return {\n            'id': instance.id,\n            'products': ProductSerializer(\n                instance.products.all(), request=self.request\n            ).serialize(),\n            'price': instance.price,\n            'created_at': instance.created_at,\n            'status': instance.get_status_display(),\n        }\n</code></pre> <p>...</p>"},{"location":"Backend/orders/#descripcion_1","title":"Descripci\u00f3n","text":"<p>El OrderSerializer se utiliza para serializar instancias del modelo Order, proporcionando una representaci\u00f3n en formato JSON de los atributos relevantes. Decoradores</p>"},{"location":"Backend/orders/#verify_user","title":"verify_user","text":"<pre><code>def verify_user(func):\n    \"\"\"\n    Verifica que el usuario autenticado sea el propietario de la orden.\n\n    Si el usuario que realiza la solicitud no es el propietario de la orden\n    especificada en `order_pk`, se devuelve una respuesta con error 403 (Forbidden).\n    \"\"\"\n    def wrapper(request, *args, **kwargs):\n        order = Order.objects.get(pk=kwargs['order_pk'])\n        if order.user != request.user:\n            return JsonResponse({'error': 'User  is not the owner of requested order'}, status=403)\n        return func(request, *args, **kwargs)\n\n    return wrapper\n</code></pre> <p>...</p>"},{"location":"Backend/orders/#descripcion_2","title":"Descripci\u00f3n","text":"<p>Este decorador verifica que el usuario autenticado sea el propietario de la orden especificada. Si no lo es, devuelve un error 403.</p>"},{"location":"Backend/orders/#verify_order","title":"verify_order","text":"<pre><code>def verify_order(func):\n    \"\"\"\n    Verifica si la orden especificada por `order_pk` existe.\n\n    Si existe, se asigna a `request.order`; de lo contrario, se retorna un error 404.\n    \"\"\"\n    def wrapper(request, *args, **kwargs):\n        try:\n            order = Order.objects.get(pk=kwargs['order_pk'])\n            request.order = order\n        except Order.DoesNotExist:\n            return JsonResponse({'error': 'Order not found'}, status=404)\n        return func(request, *args, **kwargs)\n\n    return wrapper\n</code></pre> <p>...</p>"},{"location":"Backend/orders/#descripcion_3","title":"Descripci\u00f3n","text":"<p>Este decorador verifica la existencia de la orden especificada y la asigna a request.order. Si no existe, devuelve un error 404.</p>"},{"location":"Backend/orders/#validate_credit_card","title":"validate_credit_card","text":"<pre><code>def validate_credit_card(func):\n    \"\"\"\n    Valida los datos de la tarjeta de cr\u00e9dito enviados en la solicitud.\n\n    Comprueba el formato del n\u00famero de tarjeta, la fecha de expiraci\u00f3n y el CVC.\n    Tambi\u00e9n verifica que la tarjeta no est\u00e9 expirada.\n    \"\"\"\n    def wrapper(request, *args, **kwargs):\n        CARD_NUMBER_PATTERN = re.compile(r'^\\d{4}-\\d{4}-\\d{4}-\\d{4}$')\n        EXP_DATE_PATTERN = re.compile(r'^(0[1-9]|1[0-2])\\/\\d{4}$')\n        CVC_PATTERN = re.compile(r'^\\d{3}$')\n        card_number = request.json_body['card-number']\n        exp_date = request.json_body['exp-date']\n        cvc = request.json_body['cvc']\n        if not CARD_NUMBER_PATTERN.match(card_number):\n            return JsonResponse({'error': 'Invalid card number'}, status=400)\n        if not EXP_DATE_PATTERN.match(exp_date):\n            return JsonResponse({'error': 'Invalid expiration date'}, status=400)\n        if not CVC_PATTERN.match(cvc):\n            return JsonResponse({'error': 'Invalid CVC'}, status=400)\n        card_exp_date = datetime.strptime(exp_date, '%m/%Y')\n        current_date = datetime.now()\n        if card_exp_date &lt; current_date:\n            return JsonResponse({'error': 'Card expired'}, status=400)\n        return func(request, *args, **kwargs)\n\n    return wrapper\n</code></pre> <p>...</p>"},{"location":"Backend/orders/#descripcion_4","title":"Descripci\u00f3n","text":"<p>Este decorador valida los datos de la tarjeta de cr\u00e9dito enviados en la solicitud, asegurando que el formato sea correcto y que la tarjeta no est\u00e9 expirada.</p>"},{"location":"Backend/orders/#validate_status","title":"validate_status","text":"<pre><code>def validate_status(func):\n    \"\"\"\n    Valida el estado actual de una orden antes de permitir cambios.\n\n    Impide modificar \u00f3rdenes con estado `CANCELLED` o `COMPLETED`.\n    \"\"\"\n    def wrapper(request, *args, **kwargs):\n        if request.order.status == Order.Status.CANCELLED:\n            return JsonResponse({'error': 'You cannot modify a canceled order.'}, status=400)\n        if request.order.status == Order.Status.COMPLETED:\n            return JsonResponse({'error': 'You cannot modify a completed order.'}, status=400)\n        return func(request, *args, **kwargs)\n\n    return wrapper\n</code></pre> <p>...</p>"},{"location":"Backend/orders/#descripcion_5","title":"Descripci\u00f3n","text":"<p>Este decorador valida el estado de la orden antes de permitir cambios, impidiendo modificaciones en \u00f3rdenes que ya han sido completadas o canceladas.</p>"},{"location":"Backend/orders/#vistas","title":"Vistas","text":""},{"location":"Backend/orders/#user_order_list","title":"user_order_list","text":"<pre><code>@csrf_exempt\n@required_method('GET')\n@verify_token\ndef user_order_list(request):\n    \"\"\"\n    Recupera los detalles de todos los pedidos del usuario autenticado.\n\n    Este endpoint permite a un usuario autenticado obtener la informaci\u00f3n de todas sus \u00f3rdenes.\n    \"\"\"\n    orders = Order.objects.filter(user=request.user)\n    orders_serializer = [OrderSerializer(order).serialize() for order in orders]\n    return JsonResponse(orders_serializer, safe=False, status=200)\n</code></pre> <p>...</p>"},{"location":"Backend/orders/#descripcion_6","title":"Descripci\u00f3n","text":"<p>Este endpoint devuelve una lista de todas las \u00f3rdenes del usuario autenticado.</p>"},{"location":"Backend/orders/#order_detail","title":"order_detail","text":"<pre><code>@login_required\n@csrf_exempt\n@required_method('GET')\n@verify_order\n@verify_user\ndef order_detail(request, order_pk: int):\n    \"\"\"\n    Recupera los detalles de un pedido espec\u00edfico.\n\n    Este endpoint permite a un usuario autenticado obtener la informaci\u00f3n de una orden,\n    validando que el pedido exista y que pertenezca al usuario que realiza la solicitud.\n    \"\"\"\n    serializer = OrderSerializer(request.order, request=request)\n    return serializer.json_response()\n</code></pre> <p>...</p>"},{"location":"Backend/orders/#descripcion_7","title":"Descripci\u00f3n","text":"<p>Este endpoint devuelve los detalles de una orden espec\u00edfica, validando que pertenezca al usuario autenticado.</p>"},{"location":"Backend/orders/#add_order","title":"add_order","text":"<pre><code>@csrf_exempt\n@required_method('POST')\n@load_json_body\n@verify_token\ndef add_order(request):\n    \"\"\"\n    Crea una nueva orden de pedido.\n\n    Este endpoint permite a un usuario autenticado generar una orden,\n    siempre que exista suficiente stock para los productos solicitados.\n    \"\"\"\n    order_data = request.json_body\n    order = Order(user=request.user)\n    order.save()\n    total_price = Decimal('0.00')\n    for item in order_data['products']:\n        product_pk = item['id']\n        quantity = item['quantity']\n        try:\n            product = Product.objects.get(pk=product_pk)\n        except Product.DoesNotExist:\n            return JsonResponse({'error': f'Product with id {product_pk} not found'}, status=404)\n        if product.stock &lt; quantity:\n            return JsonResponse({'error': f'Insufficient stock for {product.name}'}, status=400)\n        product.stock -= quantity\n        product.save()\n        order.products.add(product)\n        total_price += product.price * Decimal(quantity)\n    order.price = total_price\n    order.save()\n\n    return JsonResponse({'id': order.pk})\n</code></pre> <p>...</p>"},{"location":"Backend/orders/#descripcion_8","title":"Descripci\u00f3n","text":"<p>Este endpoint permite a un usuario autenticado crear una nueva orden de pedido, validando la disponibilidad de stock para los productos solicitados.</p>"},{"location":"Backend/orders/#pay_order","title":"pay_order","text":"<pre><code>@csrf_exempt\n@required_method('POST')\n@load_json_body\n@required_fields('card-number', 'exp-date', 'cvc', model=Order)\n@verify_token\n@verify_order\n@validate_credit_card\n@verify_user\n@validate_status\ndef pay_order(request, order_pk: int):\n    \"\"\"\n    Procesa el pago de una orden.\n\n    Cambia el estado de la orden a 'COMPLETED' si se valida correctamente la tarjeta.\n    \"\"\"\n    request.order.status = Order.Status.COMPLETED\n    request.order.save()\n    return JsonResponse({'msg': 'Your order has been paid and complete successfully'})\n</code></pre> <p>...</p>"},{"location":"Backend/orders/#descripcion_9","title":"Descripci\u00f3n","text":"<p>Este endpoint permite procesar el pago de una orden, cambiando su estado a 'COMPLETED' si la tarjeta de cr\u00e9dito es v\u00e1lida.</p>"},{"location":"Backend/orders/#cancel_order","title":"cancel_order","text":"<pre><code>@csrf_exempt\n@required_method('POST')\n@load_json_body\n@verify_token\n@verify_order\n@verify_user\n@validate_status\ndef cancel_order(request, order_pk: int):\n    \"\"\"\n    Cancela una orden de pedido.\n\n    Cambia el estado de la orden a 'CANCELLED' y repone el stock de los productos involucrados.\n    \"\"\"\n    order_data = request.json_body\n    for item in order_data['products']:\n        product_pk = item['id']\n        quantity = item['quantity']\n        try:\n            product = Product.objects.get(pk=product_pk)\n        except Product.DoesNotExist:\n            return JsonResponse({'error': f'Product with id {product_pk} not found'}, status=404)\n        product.stock += quantity\n        product.save()\n    request.order.status = Order.Status.CANCELLED\n    request.order.save()\n    return JsonResponse({'msg': f'Order {order_pk} has been cancelled'})\n</code></pre> <p>...</p>"},{"location":"Backend/orders/#descripcion_10","title":"Descripci\u00f3n","text":"<p>Este endpoint permite cancelar una orden de pedido, cambiando su estado a 'CANCELLED' y reponiendo el stock de los productos.</p>"},{"location":"Backend/orders/#get_earnings","title":"get_earnings","text":"<pre><code>@csrf_exempt\n@required_method('GET')\n@verify_token\n@verify_admin\ndef get_earnings(request):\n    \"\"\"\n    Obtiene las ganancias diarias del mes actual para todas las \u00f3rdenes completadas.\n    \"\"\"\n    now = timezone.now()\n    first_day_of_month = now.replace(day=1)\n    last_day_of_month = (first_day_of_month + timezone.timedelta(days=31)).replace(\n        day=1\n    ) - timezone.timedelta(days=1)\n\n    total_earnings = []\n    labels = []\n\n    for day in range(1, last_day_of_month.day + 1):\n        date = first_day_of_month.replace(day=day)\n        orders = Order.objects.filter(created_at__date=date, status=Order.Status.COMPLETED)\n        earnings = sum(order.price for order in orders)\n\n        total_earnings.append(earnings)\n        labels.append(date.strftime('%Y-%m-%d'))\n\n    return JsonResponse(\n        {\n            'labels': labels,\n            'values': total_earnings,\n        }\n    )\n</code></pre> <p>...</p>"},{"location":"Backend/orders/#descripcion_11","title":"Descripci\u00f3n","text":"<p>Este endpoint permite a los administradores obtener un resumen de las ganancias diarias del mes actual para todas las \u00f3rdenes completadas.</p>"},{"location":"Backend/orders/#urls","title":"URLs","text":"<pre><code>\nurlpatterns = [\n    path('', views.user_order_list, name='user_order_list'),\n    path('add/', views.add_order, name='add-order'),\n    path('get-earnings/', views.get_earnings, name='get-earnings'),\n    path('&lt;order_pk&gt;/', views.order_detail, name='order-detail'),\n    path('&lt;order_pk&gt;/pay-order/', views.pay_order, name='pay-order'),\n    path('&lt;order_pk&gt;/cancel-order/', views.cancel_order, name='cancel-order'),\n]\n</code></pre> <p>...</p>"},{"location":"Backend/products/","title":"Documentaci\u00f3n de la Aplicaci\u00f3n Products","text":""},{"location":"Backend/products/#introduccion","title":"Introducci\u00f3n","text":"<p>La aplicaci\u00f3n <code>products</code> gestiona los productos disponibles para la venta. Permite a los administradores crear, editar, eliminar y listar productos.</p>"},{"location":"Backend/products/#modelos","title":"Modelos","text":""},{"location":"Backend/products/#product","title":"Product","text":"<pre><code>from django.db import models\n\nclass Product(models.Model):\n    \"\"\"\n    Modelo que representa un producto disponible para la venta.\n\n    Atributos\n    ----------\n    name : CharField\n        Nombre del producto.\n    description : TextField\n        #### Descripci\u00f3n opcional del producto.\n    price : DecimalField\n        Precio del producto, con hasta 8 d\u00edgitos y 2 decimales.\n    stock : PositiveIntegerField\n        Cantidad disponible en inventario.\n    image : ImageField\n        Imagen del producto. Puede ser personalizada o usar una imagen por defecto.\n    \"\"\"\n    name = models.CharField(max_length=100)\n    description = models.TextField(blank=True, null=True)\n    price = models.DecimalField(max_digits=8, decimal_places=2)\n    stock = models.PositiveIntegerField()\n    image = models.ImageField(\n        upload_to='media/product_images/',\n        default='products_images/no_product.png',\n        blank=True,\n        null=True,\n    )\n\n    def __str__(self):\n        return self.name\n\n</code></pre>"},{"location":"Backend/products/#descripcion","title":"Descripci\u00f3n","text":"<p>El modelo Product representa un producto disponible para la venta, incluyendo atributos como nombre, descripci\u00f3n, precio, stock y una imagen.</p>"},{"location":"Backend/products/#serializadores","title":"Serializadores","text":""},{"location":"Backend/products/#productserializer","title":"ProductSerializer","text":"<pre><code>from shared.serializers import BaseSerializer\n\nclass ProductSerializer(BaseSerializer):\n    \"\"\"\n    Serializador para el modelo Product.\n\n    M\u00e9todos\n    -------\n    serialize_instance(instance) -&gt; dict\n        Serializa una instancia de Product en un diccionario con sus atributos principales.\n    \"\"\"\n    def serialize_instance(self, instance) -&gt; dict:\n        return {\n            'id': instance.id,\n            'name': instance.name,\n            'description': instance.description,\n            'price': instance.price,\n            'stock': instance.stock,\n            'image': f'http://localhost:8000{self.build_url(instance.image.url)}',\n        }\n</code></pre> <p>...</p>"},{"location":"Backend/products/#descripcion_1","title":"Descripci\u00f3n","text":"<p>El ProductSerializer se utiliza para serializar instancias del modelo Product, proporcionando una representaci\u00f3n en formato JSON de los atributos relevantes.</p>"},{"location":"Backend/products/#decoradores","title":"Decoradores","text":""},{"location":"Backend/products/#verify_product","title":"verify_product","text":"<pre><code>from django.http import JsonResponse\nfrom .models import Product\n\ndef verify_product(func):\n    \"\"\"\n    Decorador que verifica la existencia de un producto por su ID.\n\n    Este decorador intenta recuperar un producto desde la base de datos utilizando\n    el par\u00e1metro 'product_pk' proporcionado en la URL. Si el producto existe, se\n    adjunta al objeto `request` como `request.product`. Si no existe, retorna un error 404.\n    \"\"\"\n    def wrapper(request, *args, **kwargs):\n        try:\n            product = Product.objects.get(id=kwargs['product_pk'])\n            request.product = product\n        except Product.DoesNotExist:\n            return JsonResponse({'error': 'Product not found'}, status=404)\n        return func(request, *args, **kwargs)\n\n    return wrapper\n</code></pre> <p>...</p>"},{"location":"Backend/products/#descripcion_2","title":"Descripci\u00f3n","text":"<p>Este decorador verifica la existencia de un producto en la base de datos utilizando el product_pk proporcionado en la URL. Si no existe, devuelve un error 404.</p>"},{"location":"Backend/products/#vistas","title":"Vistas","text":""},{"location":"Backend/products/#product_list","title":"product_list","text":"<pre><code>@required_method('GET')\ndef product_list(request):\n    \"\"\"\n    Devuelve una lista de todos los productos en formato JSON.\n\n    Este endpoint permite obtener todos los productos registrados en la base de datos.\n    \"\"\"\n    products = ProductSerializer(Product.objects.all())\n    return products.json_response()\n</code></pre> <p>...</p>"},{"location":"Backend/products/#descripcion_3","title":"Descripci\u00f3n","text":"<p>Este endpoint devuelve una lista de todos los productos registrados en la base de datos en formato JSON.</p>"},{"location":"Backend/products/#product_detail","title":"product_detail","text":"<pre><code>@csrf_exempt\n@required_method('GET')\n@verify_product\ndef product_detail(request, product_pk):\n    \"\"\"\n    Devuelve los detalles de un producto espec\u00edfico.\n\n    Este endpoint permite obtener los detalles de un producto utilizando su ID.\n    \"\"\"\n    serializer = ProductSerializer(request.product, request=request)\n    return serializer.json_response()\n</code></pre> <p>...</p>"},{"location":"Backend/products/#descripcion_4","title":"Descripci\u00f3n","text":"<p>Este endpoint devuelve los detalles de un producto espec\u00edfico utilizando su ID.</p>"},{"location":"Backend/products/#add_product","title":"add_product","text":"<pre><code>@csrf_exempt\n@required_method('POST')\n@load_json_body\n@required_fields('name', 'description', 'price', 'stock', model=Product)\n@verify_token\n@verify_admin\ndef add_product(request):\n    \"\"\"\n    Agrega un nuevo producto.\n\n    Este endpoint permite a un administrador autenticado crear un nuevo producto\n    proporcionando el nombre, descripci\u00f3n, precio y stock del producto.\n    \"\"\"\n    name = request.json_body['name']\n    description = request.json_body['description']\n    price = request.json_body['price']\n    stock = request.json_body['stock']\n    image_base64 = request.json_body.get('image')\n\n    image_file = None\n    if image_base64:\n        try:\n            format_part, data_part = image_base64.split(',')\n            file_format = format_part.split('/')[1].split(';')[0]\n\n            image_data = base64.b64decode(data_part)\n\n            filename = f'service_{uuid.uuid4().hex[:8]}.{file_format}'\n            image_file = ContentFile(image_data, name=filename)\n\n        except Exception as e:\n            return JsonResponse({'error': f'Error procesando la imagen: {str(e)}'}, status=400)\n\n    product = Product.objects.create(\n        name=name, description=description, price=price, stock=stock, image=image_file\n    )\n    return JsonResponse({'id': product.pk})\n</code></pre> <p>...</p>"},{"location":"Backend/products/#descripcion_5","title":"Descripci\u00f3n","text":"<p>Este endpoint permite a un administrador autenticado crear un nuevo producto proporcionando los datos necesarios.</p>"},{"location":"Backend/products/#edit_product","title":"edit_product","text":"<pre><code>@csrf_exempt\n@required_method('POST')\n@load_json_body\n@required_fields('name', 'description', 'price', 'stock', model=Product)\n@verify_token\n@verify_admin\n@verify_product\ndef edit_product(request, product_pk: int):\n    \"\"\"\n    Edita un producto existente.\n\n    Este endpoint permite a un administrador autenticado editar un producto\n    existente proporcionando los nuevos datos del producto.\n    \"\"\"\n    product = request.product\n    product.name = request.json_body['name']\n    product.description = request.json_body['description']\n    product.price = request.json_body['price']\n    product.stock = request.json_body['stock']\n    image_base64 = request.json_body.get('image')\n    if image_base64:\n        try:\n            format_part, data_part = image_base64.split(',')\n            file_format = format_part.split('/')[1].split(';')[0]\n\n            image_data = base64.b64decode(data_part)\n\n            filename = f'service_{uuid.uuid4().hex[:8]}.{file_format}'\n            image_file = ContentFile(image_data, name=filename)\n            product.image = image_file\n        except Exception as e:\n            return JsonResponse({'error': f'Error procesando la imagen: {str(e)}'}, status=400)\n\n    product.save()\n    return JsonResponse({'msg': 'El producto ha sido editado'})\n</code></pre> <p>...</p>"},{"location":"Backend/products/#descripcion_6","title":"Descripci\u00f3n","text":"<p>Este endpoint permite a un administrador autenticado editar un producto existente.</p>"},{"location":"Backend/products/#delete_product","title":"delete_product","text":"<pre><code>@csrf_exempt\n@required_method('POST')\n@verify_token\n@verify_admin\n@verify_product\ndef delete_product(request, product_pk: int):\n    \"\"\"\n    Elimina un producto existente.\n\n    Este endpoint permite a un administrador autenticado eliminar un producto\n    espec\u00edfico utilizando su ID.\n    \"\"\"\n    product = request.product\n    product.delete()\n    return JsonResponse({'msg': 'El producto ha sido eliminado'})\n</code></pre> <p>...</p>"},{"location":"Backend/products/#descripcion_7","title":"Descripci\u00f3n","text":"<p>Este endpoint permite a un administrador autenticado eliminar un producto espec\u00edfico.</p>"},{"location":"Backend/products/#urls","title":"URLs","text":"<pre><code>\nname = 'products'\nurlpatterns = [\n    path('', views.product_list, name='product-list'),\n    path('add/', views.add_product, name='add_product'),\n    path('&lt;int:product_pk&gt;/', views.product_detail, name='product-detail'),\n    path('&lt;int:product_pk&gt;/edit/', views.edit_product, name='edit-product'),\n    path('&lt;int:product_pk&gt;/delete/', views.delete_product, name='delete-product'),\n]\n</code></pre> <p>...</p>"},{"location":"Backend/services/","title":"Documentaci\u00f3n de la Aplicaci\u00f3n Services","text":""},{"location":"Backend/services/#introduccion","title":"Introducci\u00f3n","text":"<p>La aplicaci\u00f3n <code>services</code> gestiona los servicios que pueden ser ofrecidos por profesionales, como barberos. Permite a los administradores crear, editar, eliminar y listar servicios.</p>"},{"location":"Backend/services/#modelos","title":"Modelos","text":""},{"location":"Backend/services/#service","title":"Service","text":"<pre><code>\nclass Service(models.Model):\n    \"\"\"\n    Modelo que representa un servicio que puede ser ofrecido por un profesional.\n\n    Atributos\n    ----------\n    name : CharField\n        Nombre del servicio.\n    description : TextField\n        #### Descripci\u00f3n opcional del servicio.\n    price : DecimalField\n        Precio del servicio, con hasta 8 d\u00edgitos y 2 decimales.\n    image : ImageField\n        Imagen representativa del servicio. Puede estar vac\u00eda o usar una por defecto.\n    duration : DurationField\n        Duraci\u00f3n del servicio como objeto timedelta.\n    created_at : DateTimeField\n        Fecha y hora en que el servicio fue creado.\n    \"\"\"\n    name = models.CharField(max_length=100)\n    description = models.TextField(blank=True, null=True)\n    price = models.DecimalField(max_digits=8, decimal_places=2)\n    image = models.ImageField(\n        upload_to='services_images/',\n        default='product_images/no_product.png',\n        blank=True,\n        null=True,\n    )\n    duration = models.DurationField()\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.name\n\n    @staticmethod\n    def convert_duration_string(duration_str):\n        \"\"\"\n        Convierte una cadena en formato ISO 8601 a un objeto timedelta.\n        \"\"\"\n        pattern = re.compile(r'P(?:\\d+D)?T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?')\n        match = pattern.match(duration_str)\n        if not match:\n            raise ValueError('Formato de duraci\u00f3n no v\u00e1lido')\n        hours = int(match.group(1)) if match.group(1) else 0\n        minutes = int(match.group(2)) if match.group(2) else 0\n        seconds = int(match.group(3)) if match.group(3) else 0\n        return timedelta(hours=hours, minutes=minutes, seconds=seconds)\n</code></pre>"},{"location":"Backend/services/#descripcion","title":"Descripci\u00f3n","text":"<p>El modelo Service representa un servicio que puede ser ofrecido por un profesional, incluyendo atributos como nombre, descripci\u00f3n, precio, duraci\u00f3n y una imagen.</p>"},{"location":"Backend/services/#serializadores","title":"Serializadores","text":""},{"location":"Backend/services/#serviceserializer","title":"ServiceSerializer","text":"<pre><code>from shared.serializers import BaseSerializer\n\nclass ServiceSerializer(BaseSerializer):\n    \"\"\"\n    Serializador para el modelo Service.\n\n    M\u00e9todos\n    -------\n    serialize_instance(instance) -&gt; dict\n        Serializa una instancia de Service en un diccionario con sus atributos principales.\n    \"\"\"\n    def serialize_instance(self, instance) -&gt; dict:\n        return {\n            'id': instance.id,\n            'name': instance.name,\n            'description': instance.description,\n            'duration': instance.duration,\n            'price': str(instance.price),\n            'created_at': instance.created_at,\n            'image': f'{self.build_url(instance.image.url)}',\n        }\n</code></pre> <p>...</p>"},{"location":"Backend/services/#descripcion_1","title":"Descripci\u00f3n","text":"<p>El ServiceSerializer se utiliza para serializar instancias del modelo Service, proporcionando una representaci\u00f3n en formato JSON de los atributos relevantes.</p>"},{"location":"Backend/services/#decoradores","title":"Decoradores","text":""},{"location":"Backend/services/#verify_service","title":"verify_service","text":"<pre><code>\ndef verify_service(func):\n    \"\"\"\n    Verifica que el servicio especificado exista.\n\n    Este decorador intenta obtener un servicio de la base de datos utilizando\n    el ID proporcionado en los argumentos de la funci\u00f3n. Si el servicio existe,\n    se asigna al objeto de solicitud. Si no se encuentra el servicio, se devuelve\n    un error 404.\n    \"\"\"\n    def wrapper(request, *args, **kwargs):\n        try:\n            service = Service.objects.get(id=kwargs['service_pk'])\n            request.service = service\n            return func(request, *args, **kwargs)\n        except Service.DoesNotExist:\n            return JsonResponse({'error': 'Servicio no encontrado'}, status=404)\n\n    return wrapper\n</code></pre> <p>...</p>"},{"location":"Backend/services/#descripcion_2","title":"Descripci\u00f3n","text":"<p>Este decorador verifica la existencia de un servicio en la base de datos utilizando el service_pk proporcionado en la URL. Si no existe, devuelve un error 404. Vistas</p>"},{"location":"Backend/services/#service_list","title":"service_list","text":"<pre><code>@csrf_exempt\n@required_method('GET')\ndef service_list(request):\n    \"\"\"\n    Devuelve una lista de todos los servicios en formato JSON.\n\n    Este endpoint permite obtener todos los servicios registrados en la base de datos.\n    \"\"\"\n    services = Service.objects.all()\n    serializer = ServiceSerializer(services, request=request)\n    return serializer.json_response()\n</code></pre> <p>...</p>"},{"location":"Backend/services/#descripcion_3","title":"Descripci\u00f3n","text":"<p>Este endpoint devuelve una lista de todos los servicios registrados en la base de datos en formato JSON.</p>"},{"location":"Backend/services/#service_detail","title":"service_detail","text":"<pre><code>@csrf_exempt\n@required_method('GET')\n@verify_service\ndef service_detail(request, service_pk):\n    \"\"\"\n    Devuelve los detalles de un servicio espec\u00edfico.\n\n    Este endpoint permite obtener los detalles de un servicio utilizando su ID.\n    \"\"\"\n    serializer = ServiceSerializer(request.service, request=request)\n    return serializer.json_response()\n</code></pre> <p>...</p>"},{"location":"Backend/services/#descripcion_4","title":"Descripci\u00f3n","text":"<p>Este endpoint devuelve los detalles de un servicio espec\u00edfico utilizando su ID.</p>"},{"location":"Backend/services/#add_service","title":"add_service","text":"<pre><code>@csrf_exempt\n@required_method('POST')\n@load_json_body\n@verify_token\n@verify_admin\ndef add_service(request):\n    \"\"\"\n    Agrega un nuevo servicio.\n\n    Este endpoint permite a un administrador autenticado crear un nuevo servicio\n    proporcionando el nombre, descripci\u00f3n, precio y duraci\u00f3n del servicio.\n    \"\"\"\n    try:\n        name = request.json_body.get('name')\n        description = request.json_body.get('description')\n        price = request.json_body.get('price')\n        duration = request.json_body.get('duration')\n        image_base64 = request.json_body.get('image')\n\n        if not all([name, description, price, duration]):\n            return JsonResponse(\n                {'error': 'Todos los campos son requeridos: name, description, price, duration'},\n                status=400,\n            )\n\n        duration = Service.convert_duration_string(duration)\n\n        image_file = None\n        if image_base64:\n            try:\n                format_part, data_part = image_base64.split(',')\n                file_format = format_part.split('/')[1].split(';')[0]\n\n                image_data = base64.b64decode(data_part)\n\n                filename = f'service_{uuid.uuid4().hex[:8]}.{file_format}'\n                image_file = ContentFile(image_data, name=filename)\n\n            except Exception as e:\n                return JsonResponse({'error': f'Error procesando la imagen: {str(e)}'}, status=400)\n\n        service = Service.objects.create(\n            name=name, description=description, price=price, duration=duration, image=image_file\n        )\n\n        return JsonResponse({'id': service.pk, 'msg': 'Servicio creado exitosamente'})\n\n    except Exception as e:\n        return JsonResponse({'error': f'Error al crear el servicio: {str(e)}'}, status=500)\n</code></pre> <p>...</p>"},{"location":"Backend/services/#descripcion_5","title":"Descripci\u00f3n","text":"<p>Este endpoint permite a un administrador autenticado crear un nuevo servicio proporcionando los datos necesarios.</p>"},{"location":"Backend/services/#edit_service","title":"edit_service","text":"<pre><code>@csrf_exempt\n@required_method('POST')\n@load_json_body\n@required_fields('name', 'description', 'price', 'duration', model=Service)\n@verify_token\n@verify_admin\n@verify_service\ndef edit_service(request, service_pk: int):\n    \"\"\"\n    Edita un servicio existente.\n\n    Este endpoint permite a un administrador autenticado editar un servicio\n    existente proporcionando los nuevos datos del servicio.\n    \"\"\"\n    service = request.service\n    service.name = request.json_body['name']\n    service.description = request.json_body['description']\n    service.price = request.json_body['price']\n    duration = request.json_body['duration']\n    service.duration = Service.convert_duration_string(duration)\n    image_base64 = request.json_body.get('image')\n    if image_base64:\n        try:\n            format_part, data_part = image_base64.split(',')\n            file_format = format_part.split('/')[1].split(';')[0]\n\n            image_data = base64.b64decode(data_part)\n\n            filename = f'service_{uuid.uuid4().hex[:8]}.{file_format}'\n            image_file = ContentFile(image_data, name=filename)\n            service.image = image_file\n        except Exception as e:\n            return JsonResponse({'error': f'Error procesando la imagen: {str(e)}'}, status=400)\n\n    service.save()\n    return JsonResponse({'msg': 'El servicio ha sido editado'})\n</code></pre> <p>...</p>"},{"location":"Backend/services/#descripcion_6","title":"Descripci\u00f3n","text":"<p>Este endpoint permite a un administrador autenticado editar un servicio existente.</p>"},{"location":"Backend/services/#delete_service","title":"delete_service","text":"<pre><code>@csrf_exempt\n@required_method('POST')\n@verify_token\n@verify_admin\n@verify_service\ndef delete_service(request, service_pk: int):\n    \"\"\"\n    Elimina un servicio existente.\n\n    Este endpoint permite a un administrador autenticado eliminar un servicio\n    espec\u00edfico utilizando su ID.\n    \"\"\"\n    service = request.service\n    service.delete()\n    return JsonResponse({'msg': 'El servicio ha sido eliminado'})\n</code></pre> <p>...</p>"},{"location":"Backend/services/#descripcion_7","title":"Descripci\u00f3n","text":"<p>Este endpoint permite a un administrador autenticado eliminar un servicio espec\u00edfico.</p>"},{"location":"Backend/services/#urls","title":"URLs","text":"<pre><code>from django.urls import path\n\nfrom . import views\n\nname = 'services'\nurlpatterns = [\n    path('', views.service_list, name='service-list'),\n    path('add/', views.add_service, name='add-service'),\n    path('&lt;int:service_pk&gt;/', views.service_detail, name='service-detail'),\n    path('&lt;int:service_pk&gt;/edit/', views.edit_service, name='edit-service'),\n    path('&lt;int:service_pk&gt;/delete/', views.delete_service, name='delete-service'),\n]\n</code></pre> <p>...</p>"},{"location":"Backend/shared/","title":"Documentaci\u00f3n de la Aplicaci\u00f3n Shared","text":""},{"location":"Backend/shared/#introduccion","title":"Introducci\u00f3n","text":"<p>La aplicaci\u00f3n <code>shared</code> contiene componentes reutilizables que son utilizados por otras aplicaciones en el proyecto, incluyendo serializadores y decoradores.</p>"},{"location":"Backend/shared/#serializadores","title":"Serializadores","text":""},{"location":"Backend/shared/#baseserializer","title":"BaseSerializer","text":"<pre><code>\nclass BaseSerializer(ABC):\n    def __init__(\n        self,\n        to_serialize: object | Iterable[object],\n        *,\n        fields: Iterable[str] = [],\n        request: HttpRequest = None,\n    ):\n        self.to_serialize = to_serialize\n        self.fields = fields\n        self.request = request\n\n    def build_url(self, path: str) -&gt; str:\n        return self.request.build_absolute_uri(path) if self.request else path\n\n    def serialize_instance(self, instance: object) -&gt; dict:\n        raise NotImplementedError\n\n    def __serialize_instance(self, instance: object) -&gt; dict:\n        serialized = self.serialize_instance(instance)\n        return {f: v for f, v in serialized.items() if not self.fields or f in self.fields}\n\n    def serialize(self) -&gt; dict | list[dict]:\n        if not isinstance(self.to_serialize, Iterable):\n            return self.__serialize_instance(self.to_serialize)\n        return [self.__serialize_instance(instance) for instance in self.to_serialize]\n\n    def to_json(self) -&gt; str:\n        return json.dumps(self.serialize())\n\n    def json_response(self) -&gt; str:\n        return JsonResponse(self.serialize(), safe=False)\n</code></pre>"},{"location":"Backend/shared/#descripcion","title":"Descripci\u00f3n","text":"<p>El BaseSerializer es una clase base para serializadores que permite convertir instancias de modelos en diccionarios que pueden ser f\u00e1cilmente convertidos a JSON. Proporciona m\u00e9todos para construir URLs, serializar instancias y generar respuestas JSON.</p>"},{"location":"Backend/shared/#decoradores","title":"Decoradores","text":""},{"location":"Backend/shared/#verify_token","title":"verify_token","text":"<pre><code>\ndef verify_token(func):\n    \"\"\"\n    Verifica el token de autenticaci\u00f3n del usuario.\n\n    Este decorador comprueba si el token de autenticaci\u00f3n proporcionado en\n    la cabecera 'Authorization' es v\u00e1lido. Si el token es v\u00e1lido, se\n    asigna el usuario correspondiente a la solicitud. Si el token no es\n    v\u00e1lido o no est\u00e1 registrado, se devuelve un error.\n    \"\"\"\n    def wrapper(request, *args, **kwargs):\n        UUID_PATTERN = re.compile(\n            r'Bearer (?P&lt;token&gt;[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})'\n        )\n        bearer_auth = request.headers.get('Authorization')\n        if m := re.fullmatch(UUID_PATTERN, bearer_auth):\n            token_reg = m['token']\n            try:\n                token = Token.objects.get(key=token_reg)\n                request.user = token.user\n            except Token.DoesNotExist:\n                return JsonResponse({'error': 'Token de autenticaci\u00f3n no registrado'}, status=401)\n        else:\n            return JsonResponse({'error': 'Token de autenticaci\u00f3n inv\u00e1lido'}, status=400)\n        return func(request, *args, **kwargs)\n\n    return wrapper\n</code></pre> <p>...</p>"},{"location":"Backend/shared/#descripcion_1","title":"Descripci\u00f3n","text":"<p>El decorador verify_token verifica el token de autenticaci\u00f3n del usuario. Si el token es v\u00e1lido, asigna el usuario correspondiente a la solicitud; de lo contrario, devuelve un error.</p>"},{"location":"Backend/shared/#required_method","title":"required_method","text":"<pre><code>def required_method(method_type):\n    \"\"\"\n    Verifica que el m\u00e9todo de la solicitud sea el esperado.\n\n    Este decorador comprueba si el m\u00e9todo HTTP de la solicitud coincide\n    con el tipo de m\u00e9todo requerido. Si no coincide, se devuelve un error\n    de m\u00e9todo no permitido.\n    \"\"\"\n    def decorator(func):\n        def wrapper(request, *args, **kwargs):\n            if request.method != method_type:\n                return JsonResponse({'error': 'M\u00e9todo no permitido'}, status=405)\n            return func(request, *args, **kwargs)\n\n        return wrapper\n\n    return decorator\n</code></pre> <p>...</p>"},{"location":"Backend/shared/#descripcion_2","title":"Descripci\u00f3n","text":"<p>El decorador required_method verifica que el m\u00e9todo HTTP de la solicitud coincida con el tipo de m\u00e9todo requerido. Si no coincide, devuelve un error 405.</p>"},{"location":"Backend/shared/#load_json_body","title":"load_json_body","text":"<pre><code>def required_fields(*fields, model):\n    \"\"\"\n    Verifica que los campos requeridos est\u00e9n presentes en el cuerpo de la solicitud.\n\n    Este decorador comprueba si los campos requeridos est\u00e1n presentes en\n    el cuerpo JSON de la solicitud. Si falta alg\u00fan campo, se devuelve un\n    error.\n    \"\"\"\n    def decorator(func):\n        def wrapper(request, *args, **kwargs):\n            json_body = json.loads(request.body)\n            for field in fields:\n                if field not in json_body:\n                    return JsonResponse({'error': 'Faltan campos requeridos'}, status=400)\n            return func(request, *args, **kwargs)\n\n        return wrapper\n\n    return decorator\n</code></pre> <p>...</p>"},{"location":"Backend/shared/#descripcion_3","title":"Descripci\u00f3n","text":"<p>El decorador load_json_body carga el cuerpo de la solicitud como un objeto JSON. Si el cuerpo est\u00e1 vac\u00edo o no es un JSON v\u00e1lido, devuelve un error.</p>"},{"location":"Backend/shared/#required_fields","title":"required_fields","text":"<pre><code>def required_fields(*fields, model):\n    \"\"\"\n    Verifica que los campos requeridos est\u00e9n presentes en el cuerpo de la solicitud.\n\n    Este decorador comprueba si los campos requeridos est\u00e1n presentes en\n    el cuerpo JSON de la solicitud. Si falta alg\u00fan campo, se devuelve un\n    error.\n    \"\"\"\n    def decorator(func):\n        def wrapper(request, *args, **kwargs):\n            json_body = json.loads(request.body)\n            for field in fields:\n                if field not in json_body:\n                    return JsonResponse({'error': 'Faltan campos requeridos'}, status=400)\n            return func(request, *args, **kwargs)\n\n        return wrapper\n\n    return decorator\n</code></pre> <p>...</p>"},{"location":"Backend/shared/#descripcion_4","title":"Descripci\u00f3n","text":"<p>El decorador required_fields verifica que los campos requeridos est\u00e9n presentes en el cuerpo de la solicitud. Si falta alg\u00fan campo, devuelve un error.</p>"},{"location":"Backend/shared/#verify_admin","title":"verify_admin","text":"<pre><code>def verify_admin(func):\n    \"\"\"\n    Verifica que el usuario autenticado sea un administrador.\n\n    Este decorador comprueba si el usuario autenticado tiene el rol de\n    administrador. Si no es un administrador, se devuelve un error de\n    acceso denegado.\n    \"\"\"\n    def wrapper(request, *args, **kwargs):\n        if request.user.is_authenticated:\n            if request.user.profile.role == 'A':\n                return func(request, *args, **kwargs)\n        return JsonResponse({'error': 'El usuario debe ser un administrador'}, status=403)\n\n    return wrapper\n</code></pre> <p>...</p>"},{"location":"Backend/shared/#descripcion_5","title":"Descripci\u00f3n","text":"<p>El decorador verify_admin verifica que el usuario autenticado sea un administrador. Si no lo es, devuelve un error 403.</p>"},{"location":"Backend/tele_bot/","title":"Documentaci\u00f3n de la Aplicaci\u00f3n Tele Bot","text":""},{"location":"Backend/tele_bot/#introduccion","title":"Introducci\u00f3n","text":"<p>La aplicaci\u00f3n <code>tele_bot</code> gestiona la interacci\u00f3n con un bot de Telegram, permitiendo a los usuarios interactuar con el bot a trav\u00e9s de comandos y recibir respuestas automatizadas.</p>"},{"location":"Backend/tele_bot/#configuracion-del-bot","title":"Configuraci\u00f3n del Bot","text":""},{"location":"Backend/tele_bot/#setup_bot","title":"setup_bot","text":"<pre><code>from django.conf import settings\nfrom telegram.ext import Application\n\ndef setup_bot():\n    \"\"\"\n    Configura y devuelve la instancia de la aplicaci\u00f3n del bot de Telegram.\n\n    Este m\u00e9todo crea una instancia de la aplicaci\u00f3n del bot usando el token\n    configurado en los ajustes, y a\u00f1ade los handlers para los comandos\n    disponibles.\n\n    Returns\n    -------\n    Application\n        Instancia configurada de la aplicaci\u00f3n del bot de Telegram.\n    \"\"\"\n    application = Application.builder().token(settings.TELEGRAM_BOT_TOKEN).build()\n\n    application.add_handler(start_handler)\n    application.add_handler(hoy_handler)\n    application.add_handler(semana_handler)\n    application.add_handler(servicios_handler)\n\n    return application\n</code></pre>"},{"location":"Backend/tele_bot/#descripcion","title":"Descripci\u00f3n","text":"<p>La funci\u00f3n setup_bot configura la instancia del bot de Telegram utilizando el token de autenticaci\u00f3n almacenado en la configuraci\u00f3n del proyecto. Tambi\u00e9n a\u00f1ade los manejadores (handlers) para los comandos disponibles, como /start, /hoy, /semana, y /servicios.</p>"},{"location":"Backend/tele_bot/#utilidades-del-bot","title":"Utilidades del Bot","text":""},{"location":"Backend/tele_bot/#send_message","title":"send_message","text":"<pre><code>import requests\n\ndef send_message(chat_id, text):\n    \"\"\"\n    Env\u00eda un mensaje al chat de Telegram.\n\n    Este m\u00e9todo utiliza la API de Telegram para enviar un mensaje al\n    chat especificado por el ID.\n\n    Parameters\n    ----------\n    chat_id : int\n        El ID del chat al que se enviar\u00e1 el mensaje.\n    text : str\n        El texto del mensaje que se enviar\u00e1.\n\n    Returns\n    -------\n    dict\n        Respuesta JSON de la API de Telegram con los detalles del mensaje enviado.\n    \"\"\"\n    url = f'https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage'\n    params = {'chat_id': chat_id, 'text': text}\n\n    print(f'Enviando mensaje a {chat_id}: {text}')  # Esto ayudar\u00e1 a ver los datos que est\u00e1s enviando\n\n    response = requests.get(url, params=params)\n\n    print(f'Respuesta de Telegram: {response.json()}')  # Ver la respuesta completa para detectar errores\n\n    return response.json()\n</code></pre> <p>...</p>"},{"location":"Backend/tele_bot/#descripcion_1","title":"Descripci\u00f3n","text":"<p>La funci\u00f3n send_message env\u00eda un mensaje al chat de Telegram especificado por el chat_id. Utiliza la API de Telegram para enviar el mensaje y devuelve la respuesta JSON de la API.</p>"},{"location":"Backend/tele_bot/#get_updates","title":"get_updates","text":"<pre><code>def get_updates():\n    \"\"\"\n    Obtiene los mensajes recientes que el bot ha recibido.\n\n    Este m\u00e9todo utiliza la API de Telegram para recuperar las actualizaciones\n    (mensajes) que han sido enviados al bot.\n\n    Returns\n    -------\n    dict\n        Respuesta JSON de la API de Telegram con las actualizaciones recibidas.\n    \"\"\"\n    url = BASE_URL + 'getUpdates'\n    response = requests.get(url)\n    return response.json()\n</code></pre> <p>...</p>"},{"location":"Backend/tele_bot/#descripcion_2","title":"Descripci\u00f3n","text":"<p>La funci\u00f3n get_updates obtiene los mensajes recientes que el bot ha recibido utilizando la API de Telegram. Devuelve la respuesta JSON con las actualizaciones recibidas.</p>"},{"location":"Backend/users/","title":"Documentaci\u00f3n de la Aplicaci\u00f3n Users","text":""},{"location":"Backend/users/#introduccion","title":"Introducci\u00f3n","text":"<p>La aplicaci\u00f3n <code>users</code> gestiona la informaci\u00f3n de los usuarios del sistema, incluyendo sus perfiles y tokens de autenticaci\u00f3n. Permite la creaci\u00f3n de perfiles extendidos y la gesti\u00f3n de roles.</p>"},{"location":"Backend/users/#modelos","title":"Modelos","text":""},{"location":"Backend/users/#profile","title":"Profile","text":"<pre><code>\nclass Profile(models.Model):\n    \"\"\"\n    Modelo que representa el perfil extendido de un usuario, incluyendo su rol en el sistema.\n\n    Atributos\n    ----------\n    user : OneToOneField\n        Relaci\u00f3n uno a uno con el usuario del sistema.\n    role : CharField\n        Rol del usuario, que puede ser ADMIN, WORKER o CLIENT.\n    created_at : DateTimeField\n        Fecha y hora de creaci\u00f3n del perfil.\n    updated_at : DateTimeField\n        Fecha y hora de la \u00faltima actualizaci\u00f3n del perfil.\n    \"\"\"\n    class Role(models.TextChoices):\n        ADMIN = 'A', 'ADMIN'\n        WORKER = 'W', 'WORKER'\n        CLIENT = 'C', 'CLIENT'\n\n    user = models.OneToOneField(\n        settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='profile'\n    )\n    role = models.CharField(choices=Role.choices, max_length=1, default=Role.CLIENT)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return f'{self.user}'\n</code></pre>"},{"location":"Backend/users/#descripcion","title":"Descripci\u00f3n","text":"<p>El modelo Profile representa el perfil extendido de un usuario, incluyendo su rol en el sistema (ADMIN, WORKER o CLIENT) y las fechas de creaci\u00f3n y actualizaci\u00f3n.</p>"},{"location":"Backend/users/#token","title":"Token","text":"<pre><code>class Token(models.Model):\n    \"\"\"\n    Modelo que representa un token de autenticaci\u00f3n \u00fanico asociado a un usuario.\n\n    Atributos\n    ----------\n    user : OneToOneField\n        Relaci\u00f3n uno a uno con el usuario del sistema.\n    key : UUIDField\n        Token \u00fanico generado autom\u00e1ticamente para el usuario.\n    created_at : DateTimeField\n        Fecha y hora de creaci\u00f3n del token.\n    \"\"\"\n    user = models.OneToOneField(\n        settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='token'\n    )\n    key = models.UUIDField(default=uuid.uuid4, unique=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'{self.user}'\n</code></pre> <p>...</p>"},{"location":"Backend/users/#descripcion_1","title":"Descripci\u00f3n","text":"<p>El modelo Token representa un token de autenticaci\u00f3n \u00fanico asociado a un usuario, que se genera autom\u00e1ticamente al crear un nuevo usuario.</p>"},{"location":"Backend/users/#serializadores","title":"Serializadores","text":""},{"location":"Backend/users/#tokenserializer","title":"TokenSerializer","text":"<pre><code>from shared.serializers import BaseSerializer\n\nclass TokenSerializer(BaseSerializer):\n    \"\"\"\n    Serializador para el modelo Token.\n\n    M\u00e9todos\n    -------\n    serialize_instance(instance) -&gt; dict\n        Serializa una instancia de Token en un diccionario con su clave \u00fanica.\n    \"\"\"\n    def serialize_instance(self, instance) -&gt; dict:\n        return {'key': instance.key}\n</code></pre> <p>...</p>"},{"location":"Backend/users/#descripcion_2","title":"Descripci\u00f3n","text":"<p>El TokenSerializer se utiliza para serializar instancias del modelo Token, proporcionando una representaci\u00f3n en formato JSON de la clave del token.</p>"},{"location":"Backend/users/#profileserializer","title":"ProfileSerializer","text":"<pre><code>class ProfileSerializer(BaseSerializer):\n    \"\"\"\n    Serializador para el modelo Profile.\n\n    M\u00e9todos\n    -------\n    serialize_instance(instance) -&gt; dict\n        Serializa una instancia de Profile en un diccionario con sus atributos principales.\n    \"\"\"\n    def serialize_instance(self, instance) -&gt; dict:\n        return {\n            'id': instance.user.id,\n            'user': instance.user.username,\n            'role': instance.role,\n            'token': TokenSerializer(instance.user.token).serialize_instance(instance.user.token),\n        }\n</code></pre> <p>...</p>"},{"location":"Backend/users/#descripcion_3","title":"Descripci\u00f3n","text":"<p>El ProfileSerializer se utiliza para serializar instancias del modelo Profile, proporcionando una representaci\u00f3n en formato JSON de los atributos del perfil, incluyendo el usuario y su token. Vistas</p>"},{"location":"Backend/users/#get_user_profile","title":"get_user_profile","text":"<pre><code>\n@login_required\n@csrf_exempt\n@required_method('GET')\ndef get_user_profile(request):\n    \"\"\"\n    Devuelve el perfil del usuario autenticado.\n\n    Este endpoint permite a un usuario autenticado obtener su perfil.\n    Si el perfil no se encuentra, se devuelve un error 404.\n    \"\"\"\n    try:\n        profile = Profile.objects.get(user=request.user)\n    except Profile.DoesNotExist:\n        return JsonResponse({'error': 'Perfil no encontrado'}, status=404)\n\n    serializer = ProfileSerializer(profile, request=request)\n    return serializer.json_response()\n</code></pre> <p>...</p>"},{"location":"Backend/users/#descripcion_4","title":"Descripci\u00f3n","text":"<p>Este endpoint permite a un usuario autenticado obtener su perfil. Si el perfil no se encuentra, devuelve un error 404.</p>"},{"location":"Backend/users/#users_per_month","title":"users_per_month","text":"<pre><code>@csrf_exempt\n@required_method('GET')\n@verify_token\n@verify_admin\ndef users_per_mounth(request):\n    \"\"\"\n    Obtiene la cantidad de usuarios registrados por d\u00eda durante el mes actual.\n\n    Esta vista recorre cada d\u00eda del mes actual y cuenta cu\u00e1ntos perfiles de usuario\n    fueron creados en cada fecha.\n    \"\"\"\n    now = timezone.now()\n    first_day_of_month = now.replace(day=1)\n    last_day_of_month = (first_day_of_month + timezone.timedelta(days=31)).replace(\n        day=1\n    ) - timezone.timedelta(days=1)\n\n    user_counts = []\n    labels = []\n\n    for day in range(1, last_day_of_month.day + 1):\n        date = first_day_of_month.replace(day=day)\n        count = Profile.objects.filter(created_at__date=date).count()\n        user_counts.append(count)\n        labels.append(date.strftime('%Y-%m-%d'))\n\n    return JsonResponse(\n        {\n            'labels': labels,\n            'values': user_counts,\n        }\n    )\n</code></pre> <p>...</p>"},{"location":"Backend/users/#descripcion_5","title":"Descripci\u00f3n","text":"<p>Este endpoint permite a un administrador obtener la cantidad de usuarios registrados por d\u00eda durante el mes actual.</p>"},{"location":"Backend/users/#get_barbers","title":"get_barbers","text":"<pre><code>@csrf_exempt\n@required_method('GET')\n@verify_token\ndef get_barbers(request):\n    \"\"\"\n    Devuelve una lista de barberos.\n\n    Este endpoint permite a un usuario autenticado obtener una lista de\n    todos los barberos registrados en el sistema.\n    \"\"\"\n    barbers = Profile.objects.filter(role=Profile.Role.WORKER)\n    serializer = ProfileSerializer(barbers, request=request)\n    return serializer.json_response()\n</code></pre> <p>...</p>"},{"location":"Backend/users/#descripcion_6","title":"Descripci\u00f3n","text":"<p>Este endpoint permite a un usuario autenticado obtener una lista de todos los barberos registrados en el sistema.</p>"},{"location":"Backend/users/#senales","title":"Se\u00f1ales","text":""},{"location":"Backend/users/#create_user_related_models","title":"create_user_related_models","text":"<pre><code>from django.conf import settings\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\nfrom .models import Profile, Token\n\n@receiver(post_save, sender=settings.AUTH_USER_MODEL)\ndef create_user_related_models(sender, instance, created, **kwargs):\n    \"\"\"\n    Crea modelos relacionados al usuario despu\u00e9s de que se guarda una instancia de usuario.\n\n    Este receptor se activa despu\u00e9s de que se guarda un nuevo usuario. Si el usuario\n    es creado, se generan autom\u00e1ticamente un perfil y un token de autenticaci\u00f3n para \u00e9l.\n    \"\"\"\n    if created:\n        Profile.objects.create(user=instance)\n        Token.objects.create(user=instance)\n</code></pre> <p>...</p>"},{"location":"Backend/users/#descripcion_7","title":"Descripci\u00f3n","text":"<p>Esta se\u00f1al se activa despu\u00e9s de que se guarda un nuevo usuario. Si el usuario es creado, se generan autom\u00e1ticamente un perfil y un token de autenticaci\u00f3n para \u00e9l.</p>"},{"location":"Frontend/","title":"Indice del Backend","text":"<p>Aqui puedes ver todas las Pantallas de la pagina Web</p>"},{"location":"Frontend/#indice","title":"Indice","text":"<ul> <li>Landing</li> <li>Autenticacion</li> <li>Navbar y Footer</li> <li>Productos</li> <li>Servicios</li> <li>Eventos</li> <li>Carrito</li> <li>Admin</li> <li>Reservas</li> <li>Profile</li> </ul>"},{"location":"Frontend/admin/","title":"Guia de Admin","text":"<p>En el admin es una pantalla de gestion que solo esta disponible cunaod tu rol es Admin y te muestran diferentes graficas de ganancias y de registros de usuarios ademas de que en los desplegables puedes a\u00f1adir, editar o eliminar de la base de datos productos, services y eventos perimitiendo asi una forma mas accesible de que se administre la pagina.</p> <p> </p>"},{"location":"Frontend/bookings/","title":"Guia para Bookings","text":"<p>En la creacion de bookings decidimos que se hiciera en tres pasos para asi poder comprobar si los barberos estaban disponibles y despues saber que horas y dias tenian disponibles por ello se divide en tres parte el formulario ademas para que la persona que quiera reservar le resulte mas facil y rapido.</p> <p>Esta es la primera parte del formulario donde se pide la eleccion de barbero.</p> <p></p> <p>En la segunda permite elegir el servicio que quieres.</p> <p></p> <p>Y por ultimo se pide la fecha y hora de la reserva.</p> <p></p> <p>Y tras a\u00f1adir te devuelve a el landing y para ver las reservas debes acceder al perfil aunque tambien se te envia un correo con la fecha y hora.</p>"},{"location":"Frontend/cart/","title":"Guia del Carrito de Compra","text":"<p>En cuanto al carrito se puede encontrar vacio que saldria esta pantalla que tiene un boton para redirigir a productos</p> <p></p> <p>Pero si el carrito tiene productos, se puede ver la siguiente pantalla con los productos que se han agrego con una forma de aumentar su cantidad y eliminarlos.</p> <p></p> <p>Tambien puedes elegir si pagarlo ya o mas tarde en el caso de que elijas que sea mas tarde se te redirige a la pantalla de perfil pero si le das a pagar ahora te manda a la pasarela de pago que es la siguiente.</p> <p></p>"},{"location":"Frontend/events/","title":"Guia para Eventos","text":"<p>En esta pantalla podremos ver en forma de cartas todos los eventos que se han creado en la aplicaci\u00f3n ademas de poder filtrar por su nombre.</p> <p></p> <p>Y en caso de que filtres por algo y no exista sale lo siguiente.</p> <p></p> <p>Y si pulsas en ver el curso te manda a una vista donde se ve mas detallada quedando de esta forma</p> <p></p>"},{"location":"Frontend/landing/","title":"Guia del Landing","text":"<p>En esta pantalla podremos encontrar el link para que los usuarios reserven y tambien una peque\u00f1a presentacion de la pagina y la barberia teniendo tambien un mapa de Google Maps con la ubicacion de la barberia.</p> <p></p>"},{"location":"Frontend/login/","title":"Guia de autenticacion","text":"<p>Si en el navbar no te has logeado tendras que hacerlo para poder acceder a algunas paginas que si intentas entrar te redirigira al login que se ve de esta forma</p> <p></p> <p>Y si no tienes una cuenta a traves del boton de ese formulario puedes crear una.</p> <p></p> <p>Y despues de esto podras entrar a las paginas que tienes permitidas por tu rol.</p>"},{"location":"Frontend/navbar/","title":"Guia de Navbar y de Footer","text":"<p>Estas dos partes de nuestra web son muy importantes siendo el navbar la forma de navegar por la pagina y el footer la parte inferior de la pagina donde se encuentran los datos de contacto y los derechos.</p> <p></p> <p>En el navbar tienes las diferentes paginas de la web ya sea en botones con links o en el caso del profile clicando en tu nombre y el logout en la casilla de al lado de el nombre tambien existen dos tipos de esta navbar segun tu rol</p> <p></p> <p></p> <p>Si eres admin es cuando se muestra ese boton y si no estas logueado te aparece en vez del nombre el boton de iniciar sesion</p>"},{"location":"Frontend/products/","title":"Guia de Productos","text":"<p>En la pantalla de productos tienes todos lo productos que esten en la base de datos, puedes buscar por nombre, precio, a traves de los filtros que son opciones y tambien si escribes n el search se hara una busqueda por nombre ademas de que el toggle te muestra solo los productos que tengan stock.</p> <p></p> <p>Y si haces un filtro que no tenga ninguna coincidencia saldra lo siguiente.</p> <p></p> <p>Ademas si le das a a\u00f1adir al carrito se a\u00f1adira a el carrito con las veces que le des a ese boton.</p>"},{"location":"Frontend/profile/","title":"Gu\u00eda de el Profile","text":"<p>El profile es el sitio de la pagina que se accede cuando le das clic a tu nombre en la navbar despues de haber iniciado sesion . Aqui puedes encontrar la informacion de tus ordenes realizadas estando tanto las pendientes, pagadas y cancelladas con su precio y productos y tambien las reservas que tengas y no esten canceladas pudiendo cancelarlas desde aqui.</p> <p>Este seria el profile antes de hacer ninguna reserva o pedido</p> <p></p> <p>Y este seria si haz echo alguna operacion</p> <p></p> <p>Los diferentes botones hacen que se hagan diferentes cosas de las que dicen. Los pedidos al dar al pagar te redirige a la pasarela de pago y si le das a cancelar se devuelve el stock correspondiente a cada producto de la tienda.</p> <p>Mientras que en las reservas si le das a cancelar se elimina la reserva de la base de datos. Para que quede libre esa hora para ese barbero y se pueda hacer otra reserva.</p>"},{"location":"Frontend/services/","title":"Guia de Servicios","text":"<p>Los Servicios son la pantalla mas sencilla de la pagina ya que solo cuenta con las cartas de todos los servicios que se ofrecen en la barberia moatrando una foto de antiguos clientes satisfechos</p> <p></p>"}]}